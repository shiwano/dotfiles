#!/usr/bin/env bash

set -euo pipefail

usage() {
	local fd="${1:-2}"
	cat <<EOF >&"$fd"
Usage: vcs-stash-files

Interactively select files to stash (Git or jj).

Examples:
  vcs-stash-files
EOF
}

main() {
	if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
		usage 1
		return 0
	fi

	if jj root >/dev/null 2>&1; then
		local files
		files="$(jj status --no-pager 2>/dev/null | grep -E '^\w ' || true)"
		[ -z "$files" ] && return 0

		local selected
		# shellcheck disable=SC2016
		selected="$(echo -e "$files" | fzf -m --preview 'fzf-preview diff $(echo {} | cut -c4-)' --prompt 'JJSquash> ' | cut -c4-)"
		[ -z "$selected" ] && return 0

		local files_array=()
		while IFS= read -r file; do
			files_array+=("$file")
		done <<<"$selected"

		jj squash -- "${files_array[@]}"
		jj status
	else
		local files
		files="$(git status -s -u --no-renames)"
		[ -z "$files" ] && return 0

		local selected
		# shellcheck disable=SC2016
		selected="$(echo -e "$files" | fzf -m --preview 'fzf-preview diff $(echo {} | cut -c4-)' --prompt 'GitStash> ' | cut -c4-)"
		[ -z "$selected" ] && return 0

		local new_files=()
		local existing_files=()
		while IFS= read -r file; do
			if git ls-files --error-unmatch "$file" >/dev/null 2>&1; then
				existing_files+=("$file")
			else
				new_files+=("$file")
			fi
		done <<<"$selected"

		if [ ${#new_files[@]} -ne 0 ]; then
			git add "${new_files[@]}"

			if [ ${#existing_files[@]} -ne 0 ]; then
				git stash push -- "${existing_files[@]}" "${new_files[@]}"
			else
				git stash push -- "${new_files[@]}"
			fi
		else
			git stash push -- "${existing_files[@]}"
		fi

		git status
	fi
}

main "$@"
