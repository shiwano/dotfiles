*os_risc.txt*   For Vim バージョン 7.3.  Last change: 2010 Aug 07


		VIMリファレンスマニュアル    by Thomas Leonard


						*riscos* *RISCOS* *RISC-OS*
このファイルにはRISC OS版のVimについての詳細が書かれている。

RISC OSへの移植は完全に新しい移植であり、古い`archi'への移植には基づいていな
い。

1.  ファイル配置場所		|riscos-locations|
2.  ファイル名改変		|riscos-munging|
3.  コマンドラインでの使用	|riscos-commandline|
4.  GUIでの使用			|riscos-gui|
5.  リモートでの使用(telnet)	|riscos-remote|
6.  テンポラリファイル		|riscos-temp-files|
7.  割込み			|riscos-interrupt|
8.  メモリ使用量		|riscos-memory|
9.  ファイルタイプ		|riscos-filetypes|
10. シェル			|riscos-shell|
11. 新リリースの移植		|riscos-porting|

何か間違いを発見した場合、emailで著者に連絡をもらえれば修正する。実際にはそれ
が間違いがなかったとしてもとりあえずemailをもらえれば、これが実際に動いている
と言う確信を著者が持てるだろう!。

Thomas Leonard <tal197@ecs.soton.ac.uk>

	[以下のURLはリンク切れ]
 移植版サイト:	http://www.ecs.soton.ac.uk/~tal197/
     あるいは:	http://www.soton.ac.uk/~tal197/

==============================================================================
							*riscos-locations*
1. ファイル配置場所

Vimの実行ファイルと共有リソースファイルは全てアプリケーションディレクトリ!Vim
に置かれる。

ファイラにより!Vimを最初に確認した時に、コマンドライン版のVimを実行するための
エイリアスコマンド*viや*exが作成される(|riscos-commandline|参照)。

!Vim.Resourcesと!Vim.Resources2には標準的なVimディストリビューションに含まれる
ファイルが含まれている。しかしADFSで正しく動作するように少し変更をし、またウィ
ンドウテンプレートのような幾つかのファイルが追加されている。

ユーザの選択(訳注:設定のことだと思われる)は`Choices:*'から読み込まれ
`<Choices$Write>.*'に保存される。もしも新しい!Boot構造を利用しているならばこれ
らは既に設定されている。そうでない場合、Choices$Pathにユーザのコンフィギュレー
ションファイルを探すべきディレクトリのリストを設定する。Choices$Writeにはファ
イルを保存したい場所を設定する(これにより使用した検索パターンや印(mark)がセッ
ションを終了しても記憶される)。

==============================================================================
							*riscos-munging*
2. ファイル名改変

デフォルトで全てのパス名の改変は無効になっているから、Vimは普通のRISC OSアプリ
ケーションのように振舞うだろう。`doc/html'というファイルを編集したいのならば、
現実には`*vi doc/html'とキー入力する。

次のような時にだけ改変が行なわれる:

- Cプロウグラムでincludeされたファイルを探す時、それらのファイルは常に改変され
  る。|[I|参照。
  NOTE: このコマンドを使用する時には正しいディレクトリ(例えば'c' や 'h'と言っ
        たサブディレクトリ)に居ることを確認すること。

- |:so|を使ったファイルの読み込み。
  '$VIM/'で始まるパスは以下のように変更される:

  $VIM/syntax/help.vim  ->  Vim:syntax.help

  `.vim'で終わるファイル名は、拡張子が取り除かれ、スラッシュがピリオドに置き換
  えられる。

RISC OSでタグファイルやスクリプトファイルを動作させるためには修正する必要があ
るだろう。

==============================================================================
							*riscos-commandline*
3. コマンドラインでの使用

コマンドラインでVimを使用するにはコマンド`*vi'を使用する(|Ex-mode|を使うには
`*ex')。

オプションのリストを表示するには`*vi -h'とキー入力する。

ハイカラーモードでVimのコマンドライン版を使うとスクロールが非常に遅くなるかも
しれない。その場合は色数の少ないモードに変更するかGUI版を使用することを推奨す
る。

また<Ctrl>を押しつづけるとさらに遅くなり、<Ctrl>と<Shift>を同時に押すと他のテ
キストベースのプログラムと同様に完全に止まってしまう。

==============================================================================
							*riscos-gui*
4. GUIでの使用

制限事項:

- 左のスクロールバーは正しく動作しない(右と下のには問題ない)。
- スクロールバーを表示しなかったとしてもスクロールの速度は増さない。

たとえアイコンが表示されていなかったとしても、ウィンドウの右下隅をドラッグする
ことでウィンドウのサイズを変更することができる。

引数--rowsと--columnsを使うことで、起動時のVimウィンドウのサイズを指定すること
ができる。このように: >

  *Vi -g --rows 20 --columns 80

クリップボードに対応しているので、テキストを選択して他のアプリケーション(こち
らもクリップボードに対応している必要がある)へ直接貼り付けることができる。

メニューをクリックすれば普通のRISC OSプログラムと同様にメニューが開く。クリッ
クするときにシフトを押した状態にしておけばクリップボードの内容が貼り付けられ
る。

ウィンドウにファイルをドラッグした場合には現在のバッファ(カーソルのあるバッ
ファであり、ドラッグした場所ではない)をそのファイルで置き換える。

ファイルをドラッグする際に<Ctrl>を押した状態にしておけばそのファイルは新しい
Vimのウィンドウで開かれる(|:sp|参照)。

インサートモードで<Shift>を押した状態のままファイルをドラッグした際はファイル
のパス名が挿入される。
>
  :browse :w
<			RISC OS標準の保存ダイアログを開く
>
  :browse :e
<			ディレクトリビュワーを開く

フォントはシステムフォント、アウトラインフォント、ZapRedraw経由のシステムフォ
ント、ZapRedraw経由のZapフォントのうちから選択する:
>
  :set guifont=
<			VDU(訳注: Video Display Unit)ドライバのシステムフォン
			トを使用する。太字と斜体がサポートされる。
>
  :set guifont=Corpus.Medium
<			与えられた名前のアウトラインフォントを使用する。どのよ
			うなフォントでも使えるが、Corpusのように等幅でなければ
			ならない。
>
  :set guifont=Corpus.Medium:w8:h12:b:i
<			上同様、しかし幅8、高さ12ポイントで太字かつ斜体。
			幅か高さのどちらか一方しか与えられない場合には両方にそ
			の値が使用される。どちらも指定しない場合は10ポイントが
			使用される。

John Kortinkのおかげで、VimはZapRedrawモジュールを使用できる。フォント名を'!'
で以下のように始めれば('!!'は2倍の高さ):
>
  :set guifont=!!
<			ZapRedraw経由でシステムフォントを使用する。これにより
			StrongARMプロセッサでは再描画が高速になるが、太字と斜
			体を使うことはできない。2倍の高さ。
>
  :set guifont=!script
<			名前つき(VimFont$Pathのディレクトリにある)Zapフォント
			を使用する。再描画の速度は'!!'と同じだが、見た目は良く
			なる。
			現在のところ"man+" と "script"だけが利用可能だが、
			VimFont$Pathにある全てのZapフォントWを使用することがで
			きる。
			Vimはその名前のディレクトリから'0', 'B', 'I'そして'IB'
			という名前のファイルを読み込もうとする。'0'(通常のスタ
			イル)だけは必須である。現在のところリンクファイルには
			対応していない。

ZapRedrawを使用している時には、編集バーがキャラクタの後ろではなく前に描画され
ることに注意。固有値0のスクリーンモードでも再描画は正しくされない。フォントに
コントロール文字が含まれる場合には、オプション'isprint'を変更することで表示さ
せることができる。

スクロールがあまりに遅すぎる場合には、オプション'scrolljump' と 'ttyscroll'を実
験的に試してみると良い。

とりわけStrongARMのユーザは: >

  :set ttyscroll=0

とするとハイカラーモードでのスクロールが速くなるだろう。

=============================================================================
							*riscos-remote*
5. リモートでの使用(telnet)

termcapエントリーが埋め込まれてはいるが、Vimを使うのに利用しているリモート端末
用にコード追加したいのならtermcapファイルを編集することもできる。

インターネット経由でAcornを使用したことはないが、ループバック接続を使って
FreeTermウィンドウでVimを使うことはできた。

`*vi -T ansi'とすることで立派に動作するようだ。

==============================================================================
							*riscos-temp-files*
6. テンポラリファイル

Vimがクラッシュした際にはスワップとバックアップファイルが'directory'と 'bdir'
で設定されるディレクトリに作成されたままになる。デフォルトではスワップファイル
は<Wimp$ScrapDir>に(例えば!Scrapの中)置かれ、バックアップファイルは(オリジナル
ファイルが)保存されていたディレクトリに書かれる。Vimは次回そのファイルを編集し
ようとした時に、その内容を復帰しようと試みる。

スワップファイルのリストを見るには、<F12>を押してから`*vi -r'とキー入力する。

以前は違うディレクトリの同じ名前のファイルを編集しようとするとVimが警告を発し
たが、現在はもはや警告をしない。

しかしながら別々のVimでそれぞれ同じファイルを編集しようとした時の警告もまた表
示されない。だから更新日時が変更されているファイルを保存する時には注意を払うよ
うにすること。

==============================================================================
							*riscos-interrupt*
7. 割込み

ループしているマクロに割込んだり、それに近い状況の場合には、コマンドライン版で
はEscapeを押し続け、GUI版では<Ctrl-C>を押す。

==============================================================================
							*riscos-memory*
8. メモリ使用量

RISC OS 3.5以降で動くVimは動的領域のメモリを使用する。それ以前のマシンでそれら
を使うことができる場合は!RunTxtとGVimのファイルを編集する必要がある。著者は安
全策を取っているので、これらのマシンでUnixLibがデフォルトでどのようにこれを行
なっているかは知らない。

動作時にメモリ割り当てを変更することができなくなるので、動的領域無しでは正しく
動作しない。故に`!Vim.GVim' と `!Vim.!RunTxt'を編集して最適な大きさを設定する
べきである。恐らく最低でも約1400Kは必要になる。

==============================================================================
							*riscos-filetypes*
9. ファイルタイプ

特定の形式のファイルに対してだけ実行されるように自動実行コマンド(autocommand)
を設定することができる。ファイル形式(filetype)の指定は&xxxのようにxxxにファイ
ル形式名を当てはめて与える。

ファイル形式名は数値によって指定しなければならない(例: テキストなら&fff)。

バージョン5.3からシステムが変更になった。イベントの新しいシーケンスは:

- ファイルが読み込まれた。|'osfiletype'|にRISC OSのファイル形式が選択されてい
  る。
- Vim形式のファイルはファイル形式とパス名に基づき、|'filetype'|を設定しようと
  試みる。
- このオプションを設定することにより構文ファイルが読み込まれたりその他のアクシ
  ョンが行なわれる。
- ファイルを保存すると|'osfiletype'|のファイル形式が与えられる。

幾つか例を見れば判りやすいだろう:

  ファイルの種類	osfiletype	filetype ~
  Cコード'c.hellow'	テキスト (&fff)	C
  LaTeX 文章		LaTeX (&2a8)	TeX
  Draw 文章		DrawFile (&aff)	(変更されない)

==============================================================================
							*riscos-shell*
10. シェル

- エクスクラメーションマーク('!')は多くのパス名に使用されていることから、直後
  に空白文字がある時か、行末にあるときにだけ置換される。

- コマンドの前に'~'を全治すれば、あらゆる出力を表示されないようにできる。つま
  りコマンド実行後に<Enter>を押す必要がなくなり、また画面が再描画されるのを回
  避できることを意味している。 {GUI版専用}

==============================================================================
							*riscos-porting*
11. RISC OSへ新リリースを移植する

必要な全てをダウンロードする:

- 最新のソースコード (www.vim.org参照)
- ランタイム環境ファイル (このファイルを含むヘルプ一式)
- RISC OSのバイナリディストリビューション (可能ならば)


アーカイブの伸長(解凍)・展開:

- raFSのディスクを作成しアーカイブをそこに置く。
- 次にgzipを伸長し
- それからtarを展開する (*tar xELf 50 archive/tar を用いる)


ソースを再コンパイルする:

- c, s, そしてhというディレクトリを作成する。
- 全てのヘッダファイルを`h'に置く  	     \
- 全てのCファイルを`c'に置く  		     | 同時に拡張子は削除する
- アセンブラファイル(`swis/s')を`s'に置く    /
- `proto'にある全てのファイルを以下のように名前を替えて`h'に置く:
    raFS::VimSrc.source.proto.file/pro
	  これを以下のように変更
    raFS::VimSrc.source.h.file_pro
- 下に示すように、ファイル`h.proto'と`c.termlib'内の単語を検索し置き換える:
    .pro"
       これを以下のように変更
    _pro.h"
- 必要なら簡単なMakefileを作成し`*make -k'を行なう。
  Makefileでは`CC = gcc -DRISCOS -DUSE_GUI -O2 -x c'を使用する。
- バイナリディストリビューションの中にバイナリを!Vim.Vimという名前で保存する。


ランタイム環境を更新する:

- !Vim.Resourcesの中身を新しいファイルで置き換える。存在しないファイルはコピー
  する。
- `doc'内の名前が`/txt'で終わらないファイルは、`tag'を除いて全て削除する。
- `doc'内のファイルの名前から拡張子を取り去る。
- `doc.tags'ファイルを編集する。第2カラムから拡張子を取り去る: >
	:%s/^\(.[^\t]*\t.*\)\.txt\t/\1\t/
- 構文ファイルから拡張子を取る。それらをADFSファイルシステムの77エントリの制限
  を避けるため2つのディレクトリに分ける。
- `Vim:FileType'を`*.c.*'にマッチするように、`*/c'かそのように編集する。
  ファイル形式のチェックも追加する。
- `Vim:Menu'を編集し、全てのキーをメニューから取り去る: >
	:%s/<Tab>[^ \t]*//
<
 vim:tw=78:ts=8:ft=help:norl:
