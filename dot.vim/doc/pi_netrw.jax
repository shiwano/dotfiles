*pi_netrw.txt*  For Vim バージョン 7.3.  Last change: 2010 Jul 28

	    -----------------------------------------------------
	    NETRW REFERENCE MANUAL    by Charles E. Campbell, Jr.
	    -----------------------------------------------------
Author:  Charles E. Campbell, Jr.  <NdrOchip@ScampbellPfamily.AbizM>
	  (remove NOSPAM from Campbell's email first)

Copyright: Copyright (C) 1999-2010 Charles E Campbell, Jr    *netrw-copyright*
	   Permission is hereby granted to use and distribute this code, with
	   or without modifications, provided that this copyright notice is
	   copied with it. Like anything else that's free, netrw.vim,
	   netrwPlugin.vim, netrwFileHandlers.vim, netrwSettings.vim,
	   syntax/netrw.vim, and pi_netrw.txt are provided *as is* and comes
	   with no warranty of any kind, either expressed or implied.  No
	   guarantees of merchantability.  No guarantees of suitability for
	   any purpose.  By using this plugin, you agree that in no event will
	   the copyright holder be liable for any damages resulting from the
	   use of this software.


		*dav*    *ftp*    *netrw-file*  *rcp*    *scp*
		*davs*   *http*   *netrw.vim*   *rsync*  *sftp*
		*fetch*  *netrw*  *network*

==============================================================================
1. 目次							*netrw-contents* {{{1

1.  目次.................................................|netrw-contents|
2.  Netrw の準備.........................................|netrw-start|
3.  Netrw リファレンス...................................|netrw-ref|
      外部プログラムとプロトコル.........................|netrw-externapp|
      読み込み...........................................|netrw-read|
      書き込み...........................................|netrw-write|
      スクリプト実行.....................................|netrw-source|
      ディレクトリのファイル一覧表示.....................|netrw-dirlist|
      USERID と PASSWORD を変更..........................|netrw-chgup|
      NETRW の変数と設定.................................|netrw-variables|
      パス...............................................|netrw-path|
4.  ネットワークファイル転送.............................|netrw-xfer|
      NETRC..............................................|netrw-netrc|
      パスワード.........................................|netrw-passwd|
5.  netrw の有効化.......................................|netrw-activate|
6.  透過的なファイル編集.................................|netrw-transparent|
7.  Ex コマンド..........................................|netrw-ex|
8.  変数とオプション.....................................|netrw-var|
9.  ブラウジング.........................................|netrw-browse|
      ブラウジングの紹介.................................|netrw-intro-browse|
      クイックリファレンス: マップ.......................|netrw-browse-maps|
      クイックリファレンス: コマンド.....................|netrw-browse-cmds|
      ディレクトリをブックマークする.....................|netrw-mb|
      ブラウジング.......................................|netrw-cr|
      水平分割ウィンドウを使ったブラウジング.............|netrw-o|
      タブを使ったブラウジング...........................|netrw-t|
      垂直分割ウィンドウを使ったブラウジング.............|netrw-v|
      一覧表示スタイル変更 (thin wide long tree).........|netrw-i|
      ブックマークしたディレクトリに移動.................|netrw-gb|
      前方のディレクトリに移動...........................|netrw-u|
      後方のディレクトリに移動...........................|netrw-U|
      ユーザー定義関数でブラウジングをカスタマイズ.......|netrw-x|
      ブックマークの削除.................................|netrw-mB|
      ファイル/ディレクトリの削除........................|netrw-D|
      ディレクトリ探査コマンド...........................|netrw-explore|
      スターとパターンを使った探索.......................|netrw-star|
      ファイルの情報を表示する...........................|netrw-qf|
      隠しリストを編集する...............................|netrw-ctrl-h|
      ソートシーケンスを編集する.........................|netrw-S|
      親ディレクトリに移動する...........................|netrw--|
      ファイル/ディレクトリを隠す........................|netrw-a|
      ブラウジングを改善する.............................|netrw-ssh-hack|
      ブックマークと履歴を一覧表示する...................|netrw-qb|
      新しいディレクトリを作成する.......................|netrw-d|
      ブラウジングディレクトリをカレントディレクトリにする |netrw-c|
      ファイルをマークする...............................|netrw-mf|
      正規表現を使ってファイルをマークする...............|netrw-mr|
      マークファイル: 任意のコマンド.....................|netrw-mx|
      マークファイル: 圧縮と伸長.........................|netrw-mz|
      マークファイル: コピー.............................|netrw-mc|
      マークファイル: Diff...............................|netrw-md|
      マークファイル: 編集...............................|netrw-me|
      マークファイル: Grep...............................|netrw-mg|
      マークファイル: 拡張子による表示/非表示............|netrw-mh|
      マークファイル: 移動...............................|netrw-mm|
      マークファイル: 印刷...............................|netrw-mp|
      マークファイル: スクリプト実行.....................|netrw-ms|
      マークファイル: タグ生成...........................|netrw-mT|
      マークファイル: ターゲットディレクトリを設定する...|netrw-mt|
      マークファイル: マーク解除.........................|netrw-mu|
      Netrw ブラウザ変数.................................|netrw-browser-var|
      Netrw ブラウザとオプション設定の互換性.............|netrw-incompatible|
      Netrw の設定.......................................|netrw-settings|
      ファイルを取得する.................................|netrw-O|
      プレビューウィンドウ...............................|netrw-p|
      以前のウィンドウ...................................|netrw-P|
      一覧を更新する.....................................|netrw-ctrl-l|
      ファイル/ディレクトリの名前を変更する..............|netrw-move|
      ソートの順番を逆にする.............................|netrw-r|
      ソートの種類を変更する.............................|netrw-s|
      ファイルを開くウィンドウを指定する.................|netrw-C|
10. 問題と対策...........................................|netrw-problems|
11. Netrw をデバッグする.................................|netrw-debug|
12. 変更履歴.............................................|netrw-history|
13. Todo.................................................|netrw-todo|
14. クレジット...........................................|netrw-credits|

{Vi にはこれらの機能はない}

==============================================================================
2. Netrw の準備						*netrw-start* {{{1

Netrw を使うとファイルの読み込み、書き込み、ネットワークを透したブラウジング、
ローカルファイルのブラウジングが簡単になります。最初に、プラグインが有効になっ
ているかどうかを確認してください。最低限、次のような設定が<.vimrc>に必要です:
(なっていない場合は |netrw-activate| を参照してください) >

	set nocp                    " 'compatible' をオフにする
	filetype plugin on          " プラグインを有効にする
<
(|'cp'|と|:filetype-plugin-on|も参照してください)

Netrw は url を使うことで他のマシンのファイルを透過的に扱うことができます
(|netrw-transparent|参照)。例えば、別のマシンにアカウントを持っていて、scp が
使えるなら、次のようにしてアクセスできます: >

	vim scp://hostname/path/to/file
<
ssh/scp による接続を簡単にしたい場合は |netrw-ssh-hack| を確認してください。

ssh/scp ではなく ftp の場合はどうでしょうか？ もちろん簡単にできます: >

	vim ftp://hostname/path/to/file
<
ftp によるアクセスを簡単にしたい場合は <.netrc> ファイルを使ってください (あな
たの ftp がそれをサポートしているなら)。通常、それはユーザーのホームディレクト
リにあって、ユーザーだけが読み書きできるようなパーミッションになっています。中
身は次のようなテキストです: >

	machine HOSTNAME login USERID password "PASSWORD"
	machine HOSTNAME login USERID password "PASSWORD"
	...
	default          login USERID password "PASSWORD"
<
どのようなファイルがあるかを確認してからファイルを開きたい場合はブラウザを使い
ます。ローカルホストのファイルを見たい場合は単にディレクトリを開きます: >

	vim .
	vim /home/userid/path
<
リモートホストのファイルを見たい場合も単にディレクトリを開きます (ただしディレ
クトリ名の末尾に "/" を付けてください): >

	vim scp://hostname/
	vim ftp://hostname/path/to/dir/
<
詳細は |netrw-browse| を参照。

scp や ftp 以外のプロトコルもサポートされています。次の項 |netrw-externapp| で
は、それらの外部アプリケーションの使用方法を説明しています。

プラグインの無効化						*netrw-noload*

プラグインを有効にしているときに netrw だけを無効にしたい場合は、netrw のプラ
グインファイルと自動ロードファイルの両方が読み込まれないようにする必要がありま
す。<.vimrc> に次の設定を書いてください: >

	:let g:loaded_netrw       = 1
	:let g:loaded_netrwPlugin = 1
<

==============================================================================
3. Netrw リファレンス						*netrw-ref* {{{1

   Netrw は |netrw-start| で説明した scp や ftp 以外のプロトコルもサポートして
   います。サポートされているのは dav、fetch、http などです。|netrw-externapp|
   の一覧を見てください。各プロトコルには変数が関連付けられていて、変数にはそ
   のプロトコルをサポートしている外部プログラムが設定されます。

外部プログラムとプロトコル				*netrw-externapp* {{{2

	プロトコル  変数	    初期設定
	--------  ----------------  -------------
	   dav:  *g:netrw_dav_cmd*   = "cadaver"     if cadaver があるなら
	   dav:   g:netrw_dav_cmd    = "curl -o"     elseif curl があるなら
	 fetch:  *g:netrw_fetch_cmd* = "fetch -o"    if fetch があるなら
	   ftp:  *g:netrw_ftp_cmd*   = "ftp"
	  http:  *g:netrw_http_cmd*  = "elinks"     if   elinks  があるなら
	  http:   g:netrw_http_cmd   = "links"      elseif links があるなら
	  http:   g:netrw_http_cmd   = "curl"       elseif curl  があるなら
	  http:   g:netrw_http_cmd   = "wget"       elseif wget  があるなら
          http:   g:netrw_http_cmd   = "fetch"      elseif fetch があるなら
	   rcp:  *g:netrw_rcp_cmd*   = "rcp"
	 rsync:  *g:netrw_rsync_cmd* = "rsync -a"
	   scp:  *g:netrw_scp_cmd*   = "scp -q"
	  sftp:  *g:netrw_sftp_cmd*  = "sftp"

	*g:netrw_http_xcmd* : http://... プロトコルで使用するオプションはこの
	変数で指定できます。コマンドに合わせて設定を変更してください。初期設定
	は各コマンドに合わせて次のようになります: >

		    elinks : "-source >"
		    links  : "-source >"
		    curl   : "-o"
		    wget   : "-q -O"
		    fetch  : "-o"
<
	例えば、あなたのシステムに elinks がインストールされているとき、(html
	ソースではなく) レンダリングされたテキストを見たい場合は、.vimrc で次
	のように設定するといいでしょう >
		let g:netrw_http_xcmd= "-dump >"
<

読み込み					*netrw-read* *netrw-nread* {{{2

	通常のコマンドで url を使うことができます。例: >

		:e ftp://[user@]machine/path
<
	Nread コマンドも用意されています:

	:Nread ?					ヘルプ表示
	:Nread "machine:path"				uses rcp
	:Nread "machine path"				uses ftp w/ <.netrc>
	:Nread "machine id password path"		uses ftp
	:Nread "dav://machine[:port]/path"		uses cadaver
	:Nread "fetch://[user@]machine/path"		uses fetch
	:Nread "ftp://[user@]machine[[:#]port]/path"	uses ftp w/ <.netrc>
	:Nread "http://[user@]machine/path"		uses http  uses wget
	:Nread "rcp://[user@]machine/path"		uses rcp
	:Nread "rsync://[user@]machine[:port]/path"	uses rsync
	:Nread "scp://[user@]machine[[:#]port]/path"	uses scp
	:Nread "sftp://[user@]machine/path"		uses sftp

書き込み				*netrw-write* *netrw-nwrite* {{{2

	ファイルを保存するときにも url を使うことができます。例: >

		:w ftp://[user@]machine/path
<
	Nwrite コマンドも用意されています:

	:Nwrite ?					ヘルプ表示
	:Nwrite "machine:path"				uses rcp
	:Nwrite "machine path"				uses ftp w/ <.netrc>
	:Nwrite "machine id password path"		uses ftp
	:Nwrite "dav://machine[:port]/path"		uses cadaver
	:Nwrite "ftp://[user@]machine[[:#]port]/path"	uses ftp w/ <.netrc>
	:Nwrite "rcp://[user@]machine/path"		uses rcp
	:Nwrite "rsync://[user@]machine[:port]/path"	uses rsync
	:Nwrite "scp://[user@]machine[[:#]port]/path"	uses scp
	:Nwrite "sftp://[user@]machine/path"		uses sftp
	http: はサポートされてません！

スクリプト実行					*netrw-source* {{{2

	スクリプトを実行するときにも url を使うことができます。例: >

		:so ftp://[user@]machine/path
<
	Nsource コマンドも用意されています:

	:Nsource ?					ヘルプ表示
	:Nsource "dav://machine[:port]/path"		uses cadaver
	:Nsource "fetch://[user@]machine/path"		uses fetch
	:Nsource "ftp://[user@]machine[[:#]port]/path"	uses ftp w/ <.netrc>
	:Nsource "http://[user@]machine/path"		uses http  uses wget
	:Nsource "rcp://[user@]machine/path"		uses rcp
	:Nsource "rsync://[user@]machine[:port]/path"	uses rsync
	:Nsource "scp://[user@]machine[[:#]port]/path"	uses scp
	:Nsource "sftp://[user@]machine/path"		uses sftp

ディレクトリのファイル一覧表示				*netrw-dirlist* {{{2

	ディレクトリを開くことでファイル一覧をブラウズできます: >

		:e scp://[user]@hostname/path/
		:e ftp://[user]@hostname/path/
<
	リモートのディレクトリを開くときは末尾の "/" が必ず必要です (netrw は
	末尾のスラッシュよってファイルのダウンロードかディレクトリのブラウズか
	を判断します)。

	Nread コマンドを使うこともできます:

	:Nread [protocol]://[user]@hostname/path/

					*netrw-login* *netrw-password*
USERID と PASSWORD の変更		*netrw-chgup* *netrw-userpass* {{{2

	ftp を使うと user-id と password を入力するプロンプトが表示されます。
	それらはグローバル変数の g:netrw_uid と s:netrw_passwd に記録されま
	す。記録された ID とパスワードは次に ftp を使うときに再使用されます。
	他の id/password を使う必要が出てきた場合は NetUserPass() 関数を呼び出
	してください。パスワードの入力を省略したい場合は ftp が <.netrc> ファ
	イルをサポートしているかどうか確認してください。|netrw-passwd| も参照
	(ssh/scp でパスワードを省略したい場合は |netrw-ssh-hach| を参照)。

	:NetUserPass [uid [password]]		-- password入力(必要ならuidも)
	:call NetUserPass()			-- uid と password 入力
	:call NetUserPass("uid")		-- password 入力
	:call NetUserPass("uid","password")	-- uid と password 設定

NETRW の変数と設定					*netrw-variables* {{{2
(|netrw-browser-var| |netrw-protocol| |netrw-settings| |netrw-var| も参照)

Netrw にはたくさんの変数が用意されていて、好きなようにカスタマイズできます。
:NetrwSettings コマンド (|netrw-settings|参照) を使うと、現在の netrw の設定が
表示されます。ほとんどの設定は下記、または |netrw-browser-options|、そして
|netrw-externapp| で説明されています。

 *b:netrw_lastfile*	最後に読み書きされたネットワークファイルがバッファごと
		      に記録される。  (:Nw で使われる)

 *g:netrw_bufsettings*	netrw バッファのオプション設定
 		      (初期設定) noma nomod nonu nowrap ro nobl

 *g:netrw_chgwin*	ファイルを開くときに使用するウィンドウの番号を指定す
		      る。 (|netrw-C| も参照)
		      (初期設定) 定義なし

 *g:Netrw_funcref*	ファイルを開くときに呼ばれる関数 (複数可) を指定する。
		      まずファイルが開かれ、それから指定された関数参照
		      (|Funcref|) が呼ばれる。複数指定する場合は関数参照のリス
		      ト (|List|) を指定する。
		      (初期設定) 定義なし
>
			    例: .vimrc で次のように設定します。すべてのファイ
			        ルを開く操作に作用します。
			    fun! MyFuncRef()
			    endfun
			    let g:Netrw_funcref= function("MyFuncRef")
<
 *g:netrw_ftp*		変数が存在しない場合はデフォルト ftp 使用
		      =0 デフォルト ftp を使う		       (uid password)
		      =1 ftp の別方式を使う		  (user uid password)
		      ftp の使用に問題があるときにこの変数を設定して ftp の別
		      方式を試してください。

 *g:netrw_ftpextracmd*	初期設定: なし
		      この変数に設定された文字列は ftp コマンドとして送信され
		      ます。例:
		        ="passive"

 *g:netrw_ftpmode*	="binary"				   (初期設定)
		      ="ascii"

 *g:netrw_ignorenetrc*	=0 (linux と cygwin での初期設定)
		      =1 <.netrc> ファイルが機能しないのでそれを無視したい場合
		         にこの値を設定します (Windoes + cmd.exe での初期設
		         定)。

 *g:netrw_menu*		=0 netrw のメニューを使う
		      =1 (初期設定) netrw のメニューを使わない

 *g:netrw_nogx*		この変数が存在する場合、"gx" マップは定義されません。
		      (|netrw-gx|参照)

 *g:netrw_uid*		(ftp) user-id       Vim セッションごとに記録される
 *s:netrw_passwd*	(ftp) password      Vim セッションごとに記録される

 *g:netrw_preview*	=0 (初期設定) プレビューウィンドウを水平分割で表示する
		      =1 プレビューウィンドウを垂直分割で表示する。
		      "直前のウィンドウ" (|netrw-P|参照) にも作用します。

 *g:netrw_scpport*      = "-P" : scp のポート番号を設定するためのオプション
 *g:netrw_sshport*      = "-p" : ssh のポート番号を設定するためのオプション

 *g:netrw_sepchr*	=\0xff
		      =\0x01 for enc == euc-jp (この値を使った方がいい文字コー
			                        ドが他にもあるなら、知らせてく
						ださい)
		      内部処理で優先番号とファイル名を区切るのに使われる。
		      |netrw-p12| 参照。

  *g:netrw_silent*	=0 : 普通に転送処理をする
		      =1 : 静か (silent) に転送処理をする

 *g:netrw_use_errorwindow* =1 : netrw のメッセージ表示に別ウィンドウを使う。
                                メッセージが確実に表示されます (初期設定)。
			 =0 : netrw のメッセージ表示に echoerr を使う。表示さ
			      れたメッセージを確認できないことがあるかもしれま
			      せんが、ウィンドウを閉じる必要がありません。

 *g:netrw_win95ftp*	=1 Win95 で、OS 付属の ftp が出力の末尾に書き出す四行
		         の空行を削除する。
		      =0 普通に ftp を使用する (末尾の行を削除しない)

 *g:netrw_cygwin*	=1 windows で cygwin 付属の scp を想定する。また、ネッ
		         トワークブラウジングで ls を使った時間とサイズによる
		         ソートを可能にする (windowsでの初期設定)。
		      =0 Windows の scp が Windows 形式のパスを扱えると想定す
		         る。ネットワークブラウジングでは ls ではなく dir を使
		         用する。
		      このオプションは unix では無視されます。

 *g:netrw_use_nt_rcp*	=0 WinNT、Win2000、WinXP の rcp を使わない
		      =1 WinNT の rcp をバイナリモードで使う   (初期設定)

パス							*netrw-path* {{{2

ほとんどのプロトコルではパスはユーザーディレクトリからの相対パスです。
(所定のディレクトリからの相対パスとして扱うプロトコルもあります)
>
	example:  vim scp://user@host/somefile
	example:  vim scp://user@host/subdir1/subdir2/somefile
<
"somefile" は "user" のホームディレクトリの中です。ルートからのパスを指定した
い場合は絶対パスを指定してください:
>
	example:  vim scp://user@host//somefile
	example:  vim scp://user@host//subdir1/subdir2/somefile
<

==============================================================================
4. ネットワークファイル転送				*netrw-xfer* {{{1

Vim におけるネットワークファイルの転送機能は Vim スクリプトで実装されたプラグ
インで提供されています (<netrw.vim>)。これは rcp、ftp or ftp+<.netrc>、scp、
fetch、dav/cadaver、rsync、sftp などを使ってネットワークファイルの読み書きを実
現しています。

http については wget or fetch による読み込みだけがサポートされています。

<netrw.vim> は標準プラグインです。Vim と様々なファイル転送プログラムをつなぐ役
割をします。オートコマンドイベント (BufReadCmd、FileReadCmd、BufWriteCmd) を
使って、url 指定によるファイルの読み書き処理を横取りします。 >

	例: vim ftp://hostname/path/to/file
<
コロンより前の文字列がプロトコルを示します (この例では ftp)。<netrw.vim> スク
リプトは、実際にファイルを転送する外部プログラム (ftp、scp、など) のコマンドを
作成します。ファイルは一時ファイル (Unix/Linux では /tmp/...) を経由して読み書
きされます。一時ファイルは <netrw.vim> によって後始末されます。

"FTP User Name and Password Disclosure" における Jan Minář 氏の説明によると、
ftp はセキュアなプロトコルではなく、ユーザー名とパスワードはインターネットの中
を "そのまま" 流れ、そしてそれは盗聴ツールで盗むことが可能である。これは netrw
の問題ではなく ftp の問題です。この問題が心配なら ftp ではなく scp や sftp を
使うようにしてください。

Netrw は同じ Vim セッション中で同じホスト名が使われている間はユーザーIDとパス
ワードを使いまわします。

Jan は netrw における ftp の処理を多少誤解しているようです。通常、一つの "ftp
セッション" では複数のコマンドが実行されます。彼は uid/password は一つの ftp
セッションの間だけ保持されるべきだと考えているようです。しかし、netrw は ftp
操作をするために複数の "ftp セッション" を使います。そのため、uid/password を
一つの "ftp セッション" の間だけ保持しておくというのは、uid/password を保持し
ないのと変わりません。そうなれば、例えばリモートディレクトリをブラウズするよう
な操作はすぐに嫌気が差してしまうでしょう。

他方、Jan M 氏には感謝を捧げたいと思います。"細工された(crafted)" ファイル名の
処理における netrw (と vim 自身) の多くの脆弱性を指摘してくれました。その問題
に対処するために |shellescape()| 関数と |fnameescape()| 関数が Bram Moolenaar
氏によって書かれ、netrw をそれらを使うように変更されました。ただ一つアドバイス
をするとすれば、ファイル名が vim コマンドのように見えて怪しいと感じたら、それ
を開いてはいけません。

				*netrw-putty* *netrw-pscp* *netrw-psftp*
プロトコルを扱う外部プログラムは変数を設定することで変更できます (例えば、scp
なら g:netrw_scp_cmd を設定します。初期設定は "scp -q" です)。例えば、PuTTY を
使う場合は次のように設定します: >

	let g:netrw_scp_cmd = '"c:\Program Files\PuTTY\pscp.exe" -q -batch'
	let g:netrw_sftp_cmd= '"c:\Program Files\PuTTY\psftp.exe"'
<
putty、pscp、psftp 等に関する説明は |netrw-p8| 参照。

Ftp (古いプロトコル) は多くの実装に恵まれました。しかし残念ながら、いまいちな
実装もあります (例えばファイル末尾にノイズが付くなど)。そのような実装を使う場
合は NetReadFixup() 関数を定義することで、ftp 読み込み後にノイズを除去すること
ができます。いくつかの Unix システム (FreeBSDなど) では "fetch" というユーティ
リティが提供されていて、それはノイズがないので <netrw.vim> で使うには適してい
ます。したがって、もし "fetch" が利用可能 (つまり実行可能) なら、ftp://... の
転送には "fetch" を使うのが望ましいでしょう。

rcp、scp、sftp、http ではネットワークファイルを透過的に扱えます。例:
>
	vim rcp://[user@]machine/path
	vim scp://[user@]machine/path
<
ftp が <.netrc> をサポートしていて、マシン名、ユーザー名、パスワードが設定され
ているなら、ftp でも透過的にファイルを扱えます。ただし、ftpが自動的に <.netrc>
ファイルを使うようになっている必要があります。
>
	vim ftp://[user@]machine[[:#]portnumber]/path
<
ftp を使うときは userid と password を聞かれることがあります。パスワードの入力
は無表示で行われます (画面には入力した文字の代わりにアスタリスクが表示され
る)。userid と password は記録され、次に同じマシンにアクセスするときにはプロン
プトは表示されません。

								*netrw-urls*
  +=================================+============================+============+
  |  Reading                        | Writing                    |  Uses      |
  +=================================+============================+============+
  | DAV:                            |                            |            |
  |  dav://host/path                |                            | cadaver    |
  |  :Nread dav://host/path         | :Nwrite dav://host/path    | cadaver    |
  +---------------------------------+----------------------------+------------+
  | DAV + SSL:                      |                            |            |
  |  davs://host/path               |                            | cadaver    |
  |  :Nread davs://host/path        | :Nwrite davs://host/path   | cadaver    |
  +---------------------------------+----------------------------+------------+
  | FETCH:                          |                            |            |
  |  fetch://[user@]host/path       |                            |            |
  |  fetch://[user@]host:http/path  |  Not Available             | fetch      |
  |  :Nread fetch://[user@]host/path|                            |            |
  +---------------------------------+----------------------------+------------+
  | FILE:                           |                            |            |
  |  file:///*                      | file:///*                  |            |
  |  file://localhost/*             | file://localhost/*         |            |
  +---------------------------------+----------------------------+------------+
  | FTP:          (*3)              |              (*3)          |            |
  |  ftp://[user@]host/path         | ftp://[user@]host/path     | ftp  (*2)  |
  |  :Nread ftp://host/path         | :Nwrite ftp://host/path    | ftp+.netrc |
  |  :Nread host path               | :Nwrite host path          | ftp+.netrc |
  |  :Nread host uid pass path      | :Nwrite host uid pass path | ftp        |
  +---------------------------------+----------------------------+------------+
  | HTTP: wget is executable: (*4)  |                            |            |
  |  http://[user@]host/path        |        Not Available       | wget       |
  +---------------------------------+----------------------------+------------+
  | HTTP: fetch is executable (*4)  |                            |            |
  |  http://[user@]host/path        |        Not Available       | fetch      |
  +---------------------------------+----------------------------+------------+
  | RCP:                            |                            |            |
  |  rcp://[user@]host/path         | rcp://[user@]host/path     | rcp        |
  +---------------------------------+----------------------------+------------+
  | RSYNC:                          |                            |            |
  |  rsync://[user@]host/path       | rsync://[user@]host/path   | rsync      |
  |  :Nread rsync://host/path       | :Nwrite rsync://host/path  | rsync      |
  |  :Nread rcp://host/path         | :Nwrite rcp://host/path    | rcp        |
  +---------------------------------+----------------------------+------------+
  | SCP:                            |                            |            |
  |  scp://[user@]host/path         | scp://[user@]host/path     | scp        |
  |  :Nread scp://host/path         | :Nwrite scp://host/path    | scp  (*1)  |
  +---------------------------------+----------------------------+------------+
  | SFTP:                           |                            |            |
  |  sftp://[user@]host/path        | sftp://[user@]host/path    | sftp       |
  |  :Nread sftp://host/path        | :Nwrite sftp://host/path   | sftp  (*1) |
  +=================================+============================+============+

	(*1) 絶対パスの指定には scp://machine//path を使う。

	(*2) <.netrc> がある場合は、使用する ftp クライアントがそれをサポート
	していると判断される。ない場合は user-id と password が聞かれる。

	(*3) ftp では、"machine" は machine#port や machine:port でも可。
	標準外のポート番号が必要な場合に使う。

	(*4) http では、wget が利用可能ならそれが使われる。あるいは fetch が利
	用可能ならそれが使われる。

:Nread コマンドと :Nwrite コマンドには複数のファイル名を指定できます。


NETRC							*netrw-netrc*

<.netrc> ファイル (普通はホームディレクトリある) には、ホスト (マシン) と
userid/password を関連付ける設定を書くことができます。

<.netrc> ファイルの一般的な書式は次のとおりです。Unix の ftp は通常は <.netrc>
をサポートしています。Windows の ftp は通常は <.netrc> をサポートしてません。
>
	machine {full machine name} login {user-id} password "{password}"
	default login {user-id} password "{password}"

ftp が自動的に <.netrc> ファイルを使うようになっている必要があります。<.netrc>
ファイルが存在する場合は、ftp 転送において user-id と passwordは聞かれません。

	Note:
	このファイルにはパスワードが含まれているので、他の誰もファイルを読めな
	いようにしてください。ほとんどのプログラムは他人が読むことができる
	.netrc ファイルの使用を拒否します。システム管理者は常にそのファイルを
	読めるということを忘れずに。例えば、Linux/Unix では次のように設定しま
	す: chmod 600 .netrc


パスワード						*netrw-passwd*

ftp でパスワードが必要なときは Vim の組み込み関数 |inputsecret()| による非表示
入力が使われます。パスワードを設定した後でそれを変更したい場合は
|netrw-userpass| を参照してください。

残念ながら、scp にパスワードを渡す方法はありません。scp を使うときはファイルの
転送の度にパスワードを入力する必要があります。この問題については
|netrw-ssh-hack| が役に立つかもしれません。


==============================================================================
5. netrw の有効化					*netrw-activate* {{{1

ネットワークファイル転送は |'nocompatible'| が設定されていればデフォルトで利用
可能です。netrw のスクリプトファイルはシステムのランタイムディレクトリにありま
す。Vim の起動時には plugin/netrwPlugin.vim だけが読み込まれます。メインスクリ
プトの autoload/netrw.vim は、実際に netrw が使用されたときに読み込まれます。
次の (最低限の) 設定を <.vimrc> ファイルに書いておくことをお勧めします: >

	set nocp
	if version >= 600
	  filetype plugin indent on
	endif
<

==============================================================================
6. 透過的なファイル編集				*netrw-transparent* {{{1

ネットワークファイルの転送は、ファイルを読み書きするときに |:autocmd| の
|BufReadCmd|、|BufWriteCmd|、|SourceCmd| イベントによって透過的に処理されま
す。それによって、ローカルファイルと同じくらい簡単にネットワークファイルを読み
込み、書き込み、スクリプト実行することができます。 >

	vim ftp://[user@]machine/path
	...
	:wq

netrw のようなプラグインの使用方法は |netrw-activate| を参照してください。


==============================================================================
7. Ex コマンド						*netrw-ex* {{{1

一般的な読み込み/書き込みコマンドがサポートされています。それ以外のコマンドも
いくつかあります。|netrw-transparent| で説明したように、通常はこれらのコマンド
を使う必要はありません。次のように使ってください (|netrw-urls|参照): >
  :e url
  :r url
  :w url
以下の説明では、{netfile} はリモートファイルの url を示します。

						*:Nwrite*  *:Nw*
:[range]Nw[rite]
		指定した範囲の行を b:netrw_lastfile が示すファイルに保存する。
		(関連: |netrw-nwrite|)

:[range]Nw[rite] {netfile} [{netfile}]...
		指定した範囲の行を {netfile} に保存する。

						*:Nread*   *:Nr*
:Nr[ead]	b:netrw_lastfile が示すファイルをカレントバッファに読み込む。
		(関連: |netrw-nread|)

:Nr[ead] {netfile} {netfile}...
		{netfile} を現在行の下に読み込む。

						*:Nsource* *:Ns*
:Ns[ource] {netfile}
		{netfile} をスクリプトとして実行する。
		リモートの .vimrc を使って vim を起動するには、次のようにしま
		す (実際にはすべて一行です) (tnx to Antoine Mechelynck) >
		vim -u NORC -N
		 --cmd "runtime plugin/netrwPlugin.vim"
		 --cmd "source scp://HOSTNAME/.vimrc"
<		 (関連: |netrw-source|)

:call NetUserPass()				*NetUserPass()*
		g:netrw_uid と s:netrw_passwd が存在しない場合は、入力プロンプ
		トが表示されます。
		(関連: |netrw-userpass|)

:call NetUserPass("userid")
		g:netrw_uid を設定します。password がない場合は、入力プロンプ
		トが表示されます。
		(関連: |netrw-userpass|)

:call NetUserPass("userid","passwd")
		g:netrw_uid と s:netrw_passwd を設定します。user-idとpassword
		は ftp 転送で使われます。user-id と password に空文字列 ("")
		を指定すると、値を削除できます。
		(関連: |netrw-userpass|)

:NetrwSettings
		このコマンドは |netrw-settings| で説明します。netrw の設定を表
		示し、netrw の動作を変更するために使用されます。


==============================================================================
8. 変数とオプション			*netrw-options* *netrw-var* {{{1

(netrw ブラウザの設定に関しては |netrw-browser-var| を見てください)

<netrw.vim> スクリプトでは、ファイル転送の動作を変更するためのオプションとし
て、いくつかの変数が定義されています。通常、それらの変数を <.vimrc> ファイルの
中で設定して使います。(|netrw-settings| |netrw-protocol| も参照)
>
                        ----------------
                        Netrw オプション
                        ----------------
	オプション		説明
	--------------		-----------------------------------------------
<
        b:netrw_col             カーソル位置を保持する (NetWrite使用時)
        g:netrw_cygwin          =1 windows の scp が cygwin のものと想定する
                                                          (windowsの初期設定)
                                =0 windows の scp が windows スタイルのパスを
                                   扱えると想定する       (その他の初期設定)
        g:netrw_ftp             =0 デフォルト ftp を使う  (uid password)
                                =1 ftp の別方式を使う     (user uid password)
        g:netrw_ftpmode         ="binary"                 (初期設定)
                                ="ascii"
	g:netrw_ignorenetrc     =1                        (初期設定)
				   <.netrc> を持っていて、しかしそれを使いたく
				   ない場合にこの変数を設定する。この変数は値
				   に関係なく存在するだけで作用する。
        b:netrw_lastfile        最近使用された method/machine/path を保持する
        b:netrw_line            現在の行番号を保持する    (NetWrite使用時)
	g:netrw_silent          =0 普通にファイル転送する
	                        =1 静か (silent) にファイル転送する
        g:netrw_uid             ftp の現在の user-id を保持する
        g:netrw_use_nt_rcp      =0 WinNT/2K/XP の rcp を使わない (初期設定)
                                =1 WinNT/2K/XP の rcp を binary mode で使う
        g:netrw_win95ftp        =0 win95/98/ME/etc で unix-style ftp を使う
                                =1 標準の ftp を使う >
	-----------------------------------------------------------------------
<
netrw は次の変数を一時的に使用します。
>
				   --------
				   一時変数
				   --------
	変数			説明
	--------		------------------------------------
<
	b:netrw_method		rcp/ftp+.netrc/ftp を示すインデックス
	w:netrw_method		(b:netrw_method と同じ)
	g:netrw_machine		入力から得られたマシン名を保持
	b:netrw_fname		アクセスするファイル名を保持 >
	------------------------------------------------------------
<
							*netrw-protocol*

netrw は複数のプロトコルをサポートしています。それぞれのプロトコルは以下の変数
を使って呼び出されます。変数はユーザーが変更することができます。
>
			   ------------------------
                           プロトコル制御オプション
			   ------------------------
    オプション        タイプ      設定            説明
    ----------        --------    --------------  ---------------------------
<
    netrw_ftp         変数        =変数なし       useridを"user userid"で設定
                                  =0              useridを"user userid"で設定
                                  =1              useridを"userid"で設定
    NetReadFixup      関数        =変数なし       変更しない
                                  =変数あり       ftp で取得したファイルを
                                                  NetReadFixup() で自動的に
                                                  フィルタする。
    g:netrw_dav_cmd    変数       ="cadaver"      if cadaver  があるなら
    g:netrw_dav_cmd    変数       ="curl -o"      elseif curl があるなら
    g:netrw_fetch_cmd  変数       ="fetch -o"     if fetch があるなら
    g:netrw_ftp_cmd    変数       ="ftp"
    g:netrw_http_cmd   変数       ="fetch -o"     if      fetch があるなら
    g:netrw_http_cmd   変数       ="wget -O"      else if wget  があるなら
    g:netrw_list_cmd   変数       ="ssh USEPORT HOSTNAME ls -Fa"
    g:netrw_rcp_cmd    変数       ="rcp"
    g:netrw_rsync_cmd  変数       ="rsync -a"
    g:netrw_scp_cmd    変数       ="scp -q"
    g:netrw_sftp_cmd   変数       ="sftp" >
    -------------------------------------------------------------------------
<
								*netrw-ftp*

|g:netrw_ftp_cmd| と |g:netrw_sftp_cmd| は ftp プロトコルを処理するための外部
プログラムを指定するオプションです。コマンドラインオプションを含めることもでき
ます (passive mode の -p など)。例: >

	let g:netrw_ftp_cmd= "ftp -p"
<
ブラウジングは |g:netrw_list_cmd| を使ってサポートされます。"HOSTNAME" と書か
れた部分は実際のホスト名に置換されます。

|g:netrw_ftp| と |netrw-fixup| の二つのオプションは、問題のある ftp クライアン
トを補助します。これらのオプションの使用方法を理解してもらうため、netrw が ftp
からファイルを読み込むときの仕組みを少し解説します。

ftp を使うとき、netrw は次のどちらかのテキストを生成して一時ファイルに書き込み
ます。
>
  g:netrw_ftpが未定義、または1以外       g:netrw_ftpに1が設定されている
  --------------------------------       ------------------------------
<
       open machine [port]                    open machine [port]
       user userid password                   userid password
       [g:netrw_ftpmode]                      password
       [g:netrw_ftpextracmd]                  [g:netrw_ftpmode]
       get filename tempfile                  [g:netrw_extracmd]
                                              get filename tempfile >
  ---------------------------------------------------------------------
<
|g:netrw_ftpmode| と |g:netrw_ftpextracmd| は任意です。

netrw は生成したテキストを次のようなコマンドでフィルタします: >
>
	:%! {g:netrw_ftp_cmd} -i [-n]
<
	g:netrw_ftp_cmd は通常は "ftp" です
	-i    ftp を対話的に使わない
	-n    netrc を使わない。Method #3 を使う (<.netrc>無しでftp使用)
訳注: Method #3 は |netrw-fixup| の a:method == 3

<.netrc> が存在するとき、userid と password の入力を省略するためにそれが使われ
ます。転送されたファイルは一時ファイルに保存されます。一時ファイルはメインの
ウィンドウに読み込まれ、そして削除されます。

使用する ftp が "user" コマンドを受け付けず、直接に userid を入力する必要があ
る場合は、"let netrw_ftp=1" という設定を <.vimrc> に書いてください。

								*netrw-cadaver*
未承認サーバーのための SSL 証明書ダイアログを何とかするには、その証明書を取っ
てきて /usr/ssl/cert.pem に置いてください。この操作によってサーバーが信用済み
扱いになります。

						*netrw-fixup* *netreadfixup*
使用している ftp が何らかの理由で余計な出力を出す場合 (例えば認証メッセージな
ど)、NetReadFixup() 関数を書いてください:
>
    function! NetReadFixup(method,line1,line2)
      " a:line1: first new line in current file
      " a:line2: last  new line in current file
      if     a:method == 1 "rcp
      elseif a:method == 2 "ftp + <.netrc>
      elseif a:method == 3 "ftp + machine,uid,password,filename
      elseif a:method == 4 "scp
      elseif a:method == 5 "http/wget
      elseif a:method == 6 "dav/cadaver
      elseif a:method == 7 "rsync
      elseif a:method == 8 "fetch
      elseif a:method == 9 "sftp
      else               " complain
      endif
    endfunction
>
NetReadFixup() 関数は定義するだけで呼び出されるようになります。これにより読み
込みの処理をカスタマイズできます。例えば、<netrw.vim> の中では Windows 95 ftp
の問題を回避するために、この関数が定義されています。なぜか Windows 95 の ftp
は転送ファイルの末尾に 4 行の空行を出力するので、それを取り除いています。
<netrw.vim> のコードは次のようなものです:
>
    if has("win95") && g:netrw_win95ftp
     fun! NetReadFixup(method, line1, line2)
       if method == 3   " ftp (no <.netrc>)
        let fourblanklines= line2 - 3
        silent fourblanklines.",".line2."g/^\s*/d"
       endif
     endfunction
    endif
>

==============================================================================
9. ブラウジング		*netrw-browsing* *netrw-browse* *netrw-help* {{{1
			*netrw-browser*  *netrw-dir*    *netrw-list*

ブラウジングの紹介				*netrw-intro-browse* {{{2
	(クイックリファレンス: |netrw-quickmaps| |netrw-quickcoms|)

Netrw はローカルシステムとリモートホストのディレクトリのブラウジングをサポート
しています。ブラウジングの機能は、ファイルとディレクトリの一覧表示、ディレクト
リへの移動、ファイルを開く、ファイルとディレクトリの削除、ディレクトリの作成、
ファイルとディレクトリの移動 (名前の変更)、ファイルとディレクトリのコピー、な
どです。ファイルを選択し、任意のシステムコマンドを実行できます。Netrw ブラウザ
には以前のエクスプローラプラグインのマップとコマンドが実装されていて、それはリ
モートディレクトリに対しても実行できます。ただし、細かい違いはあります (グロー
バル変数の名前など)。ディレクトリをブラウズするには単にそれを開きます。 >

	vim /your/directory/
	vim .
	vim c:\your\directory\
<
(関連情報: |netrw-cr|  |netrw-o|  |netrw-p| |netrw-P| |netrw-t|
           |netrw-mf|  |netrw-mx| |netrw-D| |netrw-R| |netrw-v| )

Netrw リモートファイル/ディレクトリブラウザは ssh と ftp の二つのプロトコルを
サポートしています。例えば url のプロトコルが ftp なら、netrw は ftp を使って
リモートブラウジングを実行します。ftp と ssh 以外のプロトコルを指定した場合
は、それはファイル転送になります。

Netrw リモートディレクトリブラウザを使うには、ファイルを開くときに名前の末尾に
スラッシュを付けます。ディレクトリの表示要求として解釈されます: >

	vim [protocol]://[user@]hostname/path/
<
 [protocol] は scp か ftp です。例: >

	vim ftp://ftp.home.vim.org/pub/vim/
<
ローカルディレクトリの場合は末尾のスラッシュは必要ではありません。付け忘れがよ
くあるのでもう一度言いますが、リモートディレクトリをブラウズするときは url の
末尾にスラッシュを付ける必要があります。

ssh か scp でリモートディレクトリを表示するたびにパスワードを入力したくない場
合は |netrw-ssh-hack| を参照してください。ftp でパスワードの入力を省略したい場
合は |netrw-netrc| を参照してください (ftp がそれをサポートしているなら)。

次の操作でファイル一覧の表示方法を変更できます:

	* "i" キーで表示スタイルを変更できます (|netrw-i|)。
	  四つのスタイルがあります: thin、long、wide、tree。
	  この変更を常に設定したい場合は |g:netrw_liststyle| を参照。

	* ファイルを隠す (xyz~ みたいなファイルを表示したくないですよね？) に
	  は |netrw-ctrl-h| を参照してください。

	* s を押すと name、time、size の順で並べ替えできます。

netrw で実行できる操作の一覧は |netrw-browse-cmds| を参照してください。

			*netrw-getftype* *netrw-filigree* *netrw-ftype*
ローカルファイルを一覧表示するときは、|getftype()| 関数を使って、ファイルタイ
プを示す装飾文字が付加されます:

	ディレクトリ : /
	実行ファイル : *
	fifo         : |
	リンク       : @
	ソケット     : =

装飾文字は |g:netrw_sort_sequence| にも影響します。


QUICK HELP						*netrw-quickhelp* {{{2
                     (ctrl-] を押すと項目を選択できます) ~
	ブラウジングの紹介..............................|netrw-intro-browse|
	  クイックリファレンス: マップ..................|netrw-quickmap|
	  クイックリファレンス: コマンド................|netrw-browse-cmds|
	ファイルを隠す
	  隠すファイルを設定する........................|netrw-ctrl-h|
	  ファイル/ディレクトリを隠す...................|netrw-a|
	  拡張子で表示/非表示...........................|netrw-mh|
	  ドットファイルを隠す..........................|netrw-gh|
	表示スタイル
	  表示スタイルの選択 (thin/long/wide/tree)......|netrw-i|
	  スタイル設定変数..............................|g:netrw_liststyle|
	  ファイル一覧取得に使われるシェルコマンド......|g:netrw_list_cmd|
	  ファイル情報表示..............................|netrw-qf|
	ソート方法
	  ソートスタイルの選択 (name/time/size).........|netrw-s|
	  ソートの優先順位を設定........................|netrw-S|
	  ソートオプション..............................|g:netrw_sort_options|
	  ソート優先順位設定変数........................|g:netrw_sort_sequence|
	  逆順ソート....................................|netrw-r|


				*netrw-quickmap* *netrw-quickmaps*
クイックリファレンス: マップ			*netrw-browse-maps* {{{2
>
	  ------		----------				------
	  マップ		簡単な説明				リンク
	  ------		----------				------
<	 <F1>	Netrw のヘルプを開く
	 <cr>	ディレクトリに移動、またはファイルを開く             |netrw-cr|
	 <del>	ファイル/ディレクトリを削除する                      |netrw-del|
	   -	一つ上のディレクトリに移動する                       |netrw--|
	   a	隠しファイルの表示を切り替える                       |netrw-a|
		normal  (通常表示)
		hiding  (g:netrw_list_hide にマッチしたファイルを表示しない)
		showing (g:netrw_list_hide にマッチしたファイルのみ表示する)
	   c	表示中のディレクトリをカレントディレクトリにする     |netrw-c|
	   C	ファイルを開くウィンドウを指定する                   |netrw-C|
	   d	ディレクトリを作成する                               |netrw-d|
	   D	ファイル/ディレクトリ(複数可)を削除する              |netrw-D|
	   gb	前のブックマークされたディレクトリに移動             |netrw-gb|
	   gh	ドットファイルの表示/非表示を切り替える              |netrw-gh|
	 <c-h>	隠しファイルのパターンを編集する                  |netrw-ctrl-h|
	   i	表示方法を切り替える (thin, long, wide, tree)        |netrw-i|
	 <c-l>	最新の情報に更新する                              |netrw-ctrl-l|
	   mb	カレントディレクトリをブックマークする               |netrw-mb|
	   mc	マークしたファイルをターゲットディレクトリにコピー   |netrw-mc|
	   md	マークしたファイルの差分を表示する (3ファイルまで)   |netrw-md|
	   me	マークしたファイルを引数リストに入れ編集する         |netrw-me|
	   mf	ファイルをマークする                                 |netrw-mf|
	   mh	マークしたファイルの拡張子を隠しリストに登録/解除    |netrw-mh|
	   mm	マークしたファイルをターゲットディレクトリに移動     |netrw-mm|
	   mp	マークしたファイルを印刷する                         |netrw-mp|
	   mr	シェル形式正規表現 (|regexp|) でファイルをマークする |netrw-mr|
	   mt	表示中のディレクトリをターゲットディレクトリにする   |netrw-mt|
	   mT	マークしたファイルに対して ctags を実行              |netrw-mT|
	   mu	すべてのマークを解除する                             |netrw-mu|
	   mx	マークしたファイルに対して任意のシェルコマンドを実行 |netrw-mx|
	   mz	マークしたファイルを圧縮/伸長する                    |netrw-mz|
	   o	カーソル位置のファイル/ディレクトリを                |netrw-o|
		新しいウィンドウで開く。水平分割。
	   O	カーソル位置のファイルを取得する                     |netrw-O|
	   p	ファイルをプレビューする                             |netrw-p|
	   P	直前に使用していたウィンドウで開く                   |netrw-P|
	   qb	ブックマークと履歴の一覧を表示する                   |netrw-qb|
	   qf	ファイル情報を表示する                               |netrw-qf|
	   r	ソート順を逆にする                                   |netrw-r|
	   R	ファイル/ディレクトリ(複数可)の名前を変える          |netrw-R|
	   s	ソート方法を変える: name, time, file size            |netrw-s|
	   S	名前ソート時の拡張子の優先順位を設定する             |netrw-S|
	   t	カーソル位置のファイル/ディレクトリを新しいタブで開く|netrw-t|
	   u	最近訪れたディレクトリに移動する                     |netrw-u|
	   U	次に訪れたディレクトリに移動する                     |netrw-U|
	   v	カーソル位置のファイル/ディレクトリを                |netrw-v|
		新しいウィンドウで開く。垂直分割。
	   x	関連付けられたプログラムでファイルを表示する         |netrw-x|

	   %	表示しているディレクトリで新しいファイルを開く       |netrw-%|

	*netrw-mouse* *netrw-leftmouse* *netrw-middlemouse* *netrw-rightmouse*
	<leftmouse>	(gvim only) ファイルを選択して <cr> を押したのと同じ。
			(ファイルを開く、ディレクトリに移動)
	<middlemouse>	(gvim only) ファイルを選択して P を押したのと同じ。
			|netrw-P| 参照
	<rightmouse>	(gvim only) 選択したファイル/ディレクトリを削除する。
	<2-leftmouse>	(gvim only) 使用できる条件:
	                 * netrw からファイルを開いたとき
	                 * |g:netrw_retmap| == 1
	                 * netrw がロードされた時点で <2-leftmouse> に対する
	                   マップが定義されていない
			netrw ブラウザウィンドウに戻る。|g:netrw_retmap|参照。
	<s-leftmouse>	(gvim only) mf と同じ。ファイルをマークする。

	(ブラウジング中にマウスボタンを無効化するには: |g:netrw_mousemaps|)

				*netrw-quickcom* *netrw-quickcoms*
クイックリファレンス: コマンド	*netrw-explore-cmds* *netrw-browse-cmds* {{{2
     :NetrwClean[!] ...........................................|netrw-clean|
     :NetrwSettings ...........................................|netrw-settings|
     :Explore[!]  [dir] カレントファイルのディレクトリを開く...|netrw-explore|
     :Hexplore[!] [dir] 水平分割 & Explore.....................|netrw-explore|
     :Nexplore[!] [dir] 垂直分割 & Explore.....................|netrw-explore|
     :Pexplore[!] [dir] 垂直分割 & Explore.....................|netrw-explore|
     :Rexplore          Explorer に戻る........................|netrw-explore|
     :Sexplore[!] [dir] ウィンドウ分割 & Explore...............|netrw-explore|
     :Texplore[!] [dir] タブ & Explore.........................|netrw-explore|
     :Vexplore[!] [dir] 垂直分割 & Explore.....................|netrw-explore|

ディレクトリをブックマークする {{{2
				*netrw-mb* *netrw-bookmark* *netrw-bookmarks*
次のコマンドでディレクトリをブックマークできます >

	mb
<
ブックマークは $HOME/.netrwbook に保存されます。ブックマークは常にソートされま
す。

関連項目:
	|netrw-gb| ブックマークに戻る (移動する)
	|netrw-mB| ブックマークを削除する
	|netrw-qb| ブックマークを一覧表示する


ブラウジング						*netrw-cr* {{{2

ブラウジングは簡単です。ファイルまたはディレクトリの上にカーソルを移動して、
<cr> (リターンキー) を押すとファイルが開きます。ディレクトリを開くとそのファイ
ル一覧が表示されます。ファイルを開くときには一覧表示で使われたプロトコルが使用
されます。

  警告: 一覧表示には四つの方法があります (|netrw-i|参照)。long/wide 表示では二
  つ以上のスペースでファイル名/ディレクトリ名を区切るので、ファイル名に二つ以
  上のスペースが含まれている場合、あるいは名前の末尾にスペースが付いている場合
  は、表示方法を "thin" にしてからファイルを選択してください。

|g:netrw_browse_split| オプション (初期設定は0) を設定すると、ファイルを開くと
きの動作を、新しいウィンドウやタブを開くように変更できます。設定が 1 か 2 な
ら、ウィンドウはそれぞれ水平分割、垂直分割されます。設定が 3 なら、新しいタブ
でファイルが開きます。


gui (gvim) では <leftmouse> (左クリック) でファイルを選択できます。また、

 *|g:netrw_retmap| == 1            (初期設定は0)
 * netrw からファイルを開いたとき
 * netrw がロードされた時点で <2-leftmouse> に対するマップが定義されていない

以上の条件を満たすとき、左ダブリクリックで元の netrw ブラウザウィンドウに戻る
ことができます。

ブラウジング、特にリモートブラウジングを効率よくするため、ディレクトリのファイ
ル一覧バッファは再利用されます。この動作は |g:netrw_fastbrowse| 変数で制御でき
ます。低速ブラウジング (バッファ再利用なし)、中速ブラウジング (リモートディレ
クトリのみバッファ再利用)、高速ブラウジング (可能な限りバッファを再利用)、から
選択できます。バッファ再利用の代償として、何か変更があった (例えば新しいファイ
ルが作成された) 場合でも、表示されるファイル一覧は古いままです。最新の情報に更
新するには ctrl-L (|netrw-ctrl-l|参照) を押してください。


関連トピック: |netrw-o| |netrw-p| |netrw-P| |netrw-t| |netrw-v|
関連設定:     |g:netrw_browse_split|      |g:netrw_fastbrowse|
	      |g:netrw_ftp_list_cmd| |g:netrw_ftp_sizelist_cmd|
	      |g:netrw_ftp_timelist_cmd|  |g:netrw_ssh_cmd|
	      |g:netrw_ssh_browse_reject| |g:netrw_use_noswf|


水平分割ウィンドウを使ったブラウジング		*netrw-o* *netrw-horiz* {{{2

<cr> でファイル/ディレクトリを開くことができますが、代わりに "o" マップを使え
ばウィンドウを分割して開くことができます。ウィンドウは水平分割されます。(垂直
分割は |netrw-v|)

通常、o キーを押すと新しいウィンドウが上に分割されます。下に分割したい場合は
<.vimrc> の中で次のように設定してください:

	let g:netrw_alto = 1

(|netrw-t| と |netrw-T| と|netrw-v| も参照)

関連設定: |g:netrw_alto| |g:netrw_winsize|


タブを使ったブラウジング			*netrw-t* *netrw-T* {{{2

<cr> でファイル/ディレクトリを開くことができますが、代わりに "t" マップを使え
ばそれを新しいタブで開くことができます。"T" を使うと、ファイル/ディレクトリを
バックグラウンドタブで開くことができます (|gT| 参照)。

関連項目: |netrw-o| |netrw-v|


垂直分割ウィンドウを使ったブラウジング			*netrw-v* {{{2

<cr> でファイル/ディレクトリを開くことができますが、代わりに "v" マップを使え
ばウィンドウを分割して開くことができます。ウィンドウは垂直分割されます。(水平
分割は |netrw-o|)

通常、v キーを押すと新しいウィンドウが左に分割されます。右に分割したい場合は
<.vimrc> の中で次のように設定してください:

	let g:netrw_altv = 1

(|netrw-o| と|netrw-t| |netrw-T| も参照)

一つのディレクトリには一つのバッファが使われます。"v" で表示済みのサブディレク
トリを開くとウィンドウは分割されますが、同じバッファが再び表示されます。

関連設定: |g:netrw_altv| |g:netrw_winsize|

一覧表示スタイル変更 (THIN LONG WIDE TREE)			*netrw-i* {{{2
                     (細   長   広   ツリー)

"i" マップを使うと表示方法が thin, long, wide, tree と、順番に切り替わります。

thin 形式ではファイル/ディレクトリの名前だけが表示されます。

long 形式は、リモートディレクトリの場合は ssh 経由で "ls" コマンドを実行した結
果に基づいて表示され、ローカルディレクトリの場合はファイル名、ファイルサイズ
(バイト単位)、最終変更日時が表示されます。long 形式では末尾にスペースが付いた
ファイル名を扱うことができません。そのようなファイルがあるときは thin 形式を
使ってください。

wide 形式では二つ以上のスペースを使ってファイル名を区切って表示します。この表
示形式では、二つ以上の連続したスペースが含まれているファイル名、または末尾にス
ペースが付いているファイル名を扱うことができません。そのような場合は thin 形式
を使ってください。wide 形式は最もコンパクトな表示形式です。

tree 形式ではトップディレクトリに続いてファイル/ディレクトリが名前の前に "|"
を付けて表示されます。ディレクトリの名前の所で <cr> キーを押すと、そのディレク
トリを開いたり閉じたりできます。

デフォルトの表示スタイルを変更できます。(|g:netrw_liststyle|) 参照。
例えば、次の行を .vimrc に書くと: >
	let g:netrw_liststyle= 4
ツリー形式の表示スタイルがデフォルトで使用されます。

関連設定: |g:netrw_liststyle| |g:netrw_maxfilenamelen|
          |g:netrw_timefmt|   |g:netrw_list_cmd|

パーミッションの変更						*netrw-gp* {{{2

"gp" を使うと新しいパーミッションを入力するプロンプトが表示されます。カーソル
位置のファイルのパーミッションを変更できます。
現在、これはローカルファイルに対してのみ機能します。

関連設定: |g:netrw_chgperm|


ブックマークしたディレクトリに移動			*netrw-gb*  {{{2

ブックマークしたディレクトリに移動するには、次のコマンドを使います。

	{cnt}gb

カウントを付けてブックマークを指定することができます。

関連項目:
	|netrw-mB| ブックマークを削除する
	|netrw-mb| ブックマークを設定する
	|netrw-qb| ブックマークを一覧表示する


前のディレクトリに戻る				*netrw-u* *netrw-updir* {{{2

ディレクトリを移動するとき (カレントセッションで新規の場合)、そのディレクトリ
は、最近表示したディレクトリの履歴リストに保存されます (g:netrw_dirhistmax が
0 でない場合に限る。初期設定は 10)。"u" マップを使用すると、前のディレクトリに
移動できます。反対に移動したい場合は |netrw-U| を参照。


次のディレクトリに進む				*netrw-U* *netrw-downdir* {{{2

"U" マップを使用すると、次のディレクトリに移動できます。このマップは "u" マッ
プの反対です (|netrw-u|参照)。q マップを使用するとブックマークと履歴の一覧を表
示できます (|netrw-qb|参照)。


NETRW CLEAN					*netrw-clean* *:NetrwClean*

:NetrwClean を使うと、ホームディレクトリから netrw を削除できます。正確には、
|'runtimepath'| の最初のディレクトリから削除します。

:NetrwClean! を使うと、|'runtimepath'| のすべてのディレクトリから netrw を削除
できます。

どちらのコマンドも、本当に削除していいかどうかを確認するダイアログが最初に表示
されます。ファイルを削除する権限がない場合はエラーメッセージが表示されます。

						*netrw-gx*
ユーザー定義関数でブラウジングをカスタマイズ	*netrw-x* *netrw-handler* {{{2
						(|netrw_filehandler|も参照)

html, gif, jpeg, (word/office) doc などのファイルは専用ハンドラ (コンピュータ
にあらかじめ備わっているようなツール) で処理するのが一番です。
Netrw ではそのような専用ハンドラの呼び出しをサポートしています: >

	* ファイル一覧表示中に "x" キーを押す
	* ファイルを開いているときに、ファイル名の上で gx を押す
<	  (|g:netrw_nogx| が設定されている場合は使えません)

Netrw は次の方法で専用ハンドラを決定します:

  * |g:netrw_browsex_viewer| が設定されているときは、それを使ってファイルを開
    きます。例えば次のような設定が便利です (<.vimrc>で設定する): >

	:let g:netrw_browsex_viewer= "kfmclient exec"
<   or >
	:let g:netrw_browsex_viewer= "gnome-open"
<
    g:netrw_browsex_viewer が '-' のときは netrwFileHandler() が最初に呼ばれま
    す (|netrw_filehandler|参照)。

  * Windows 32 or 64 では、url と FileProtocolHandler dll が使われます。
  * Gnome (with gnome-open): gnome-open が使われます。
  * KDE (with kfmclient)   : kfmclient が使われます。
  * Mac OS X               : open が使われます。
  * その他では netrwFileHandler プラグインが使われます。

これらの方法ではファイルを処理するためのアプリケーションは拡張子によって決めら
れます。例えば OpenOffice (*.sfx)、画像表示 (*.jpg, *.gif, etc)、PostScript
(*.ps, *.eps) などに対応可能です。

							*netrw_filehandler*

"x" マップはファイルの拡張子に応じて関数を呼び出します。ただし、あらかじめハン
ドラ関数を定義しておく必要があります。
>
 例: mypgm.html   x ->
                  NFH_html("scp://user@host/some/path/mypgm.html")
<
拡張子ごとのハンドラ関数を自分で定義できます。関数のサンプルは
<autoload/netrwFileHandlers.vim> を参照してください。例: >

	" NFH_suffix(filename)
	" NFH_拡張子(ファイル名)
	fun! NFH_suffix(filename)
	..ファイル名に応じた処理...
	endfun
<
このような関数は .vim/plugin (vimfiles\plugin) ディレクトリ内のファイルで定義
します。Vim では関数名に記号を含めることができません (アンダースコアは可)。記
号を含む拡張子をサポートするため、拡張子は次のルールで変換されます: >

    @ -> AT       ! -> EXCLAMATION    % -> PERCENT
    : -> COLON    = -> EQUAL          ? -> QUESTION
    , -> COMMA    - -> MINUS          ; -> SEMICOLON
    $ -> DOLLAR   + -> PLUS           ~ -> TILDE
<
例: >

	file.rcs,v  ->  NFH_rcsCOMMAv()
<
他にも変換が必要な文字があるようなら、メールでお知らせください: >
		NdrOchip at ScampbellPfamily.AbizM - NOSPAM

関連設定: |g:netrw_browsex_viewer|

							*netrw-curdir*
ブックマークを削除する					*netrw-mB* {{{2

ブックマークを削除するには、次のコマンドを使います >

	{cnt}mB
<
関連項目:
	|netrw-gb| ブックマークに戻る (移動する)
	|netrw-mb| ブックマークを設定する
	|netrw-qb| ブックマークを一覧表示する


ファイル/ディレクトリの削除	*netrw-delete* *netrw-D* *netrw-del* {{{2

ファイルが |netrw-mf| でマークされていない場合: (local marked file list)

    ファイル/ディレクトリを削除するにはファイル名の上にカーソルを移動して "D"
    を押します。ディレクトリを削除する場合は中身が空でなければなりません。ディ
    レクトリがディレクトリへのソフトリンクだった場合は、ディレクトリを削除する
    ために二つのリクエストが実行されます。netrw はファイルを削除する前に確認ダ
    イアログを表示します。"V" コマンド (ビジュアルセレクト) で範囲を選択して
    "D" を使うこともできます。
訳注: > 二つのリクエスト
訳注: rmdir <file> || rm <file> 的な処理

ファイルが |netrw-mf| でマークされている場合: (local marked file list)

    マークされたファイル (と空ディレクトリ) が削除されます。netrw はファイルを
    削除する前に確認ダイアログを表示します。

ファイルとディレクトリの削除には、|g:netrw_rm_cmd|、|g:netrw_rmf_cmd|、
|g:netrw_rmdir_cmd| 変数が使われます。|g:netrw_rm_cmd| はファイルの削除に使わ
れます。初期設定は次のとおり:

	g:netrw_rm_cmd: ssh HOSTNAME rm

g:netrw_rmdir_cmd 変数はディレクトリの削除に使われます。初期設定は次のとおり:

	g:netrw_rmdir_cmd: ssh HOSTNAME rmdir

g:netrw_rmdir_cmd によるディレクトリの削除が失敗した場合は、g:netrw_rmf_cmd を
使用した削除が試されます。初期設定は次のとおり:

	g:netrw_rmf_cmd: ssh HOSTNAME rm -f

関連設定: |g:netrw_local_rmdir| |g:netrw_rm_cmd|
          |g:netrw_rmdir_cmd|   |g:netrw_ssh_cmd|


*netrw-explore*  *netrw-hexplore* *netrw-nexplore* *netrw-pexplore*
*netrw-rexplore* *netrw-sexplore* *netrw-texplore* *netrw-vexplore*
ディレクトリ探査コマンド  {{{2

     :[N]Explore[!]  [dir]... カレントファイルのディレクトリを開く   *:Explore*
     :[N]Hexplore[!] [dir]... 水平分割で開く                         *:Hexplore*
     :Rexplore            ... エクスプローラに戻る                   *:Rexplore*
     :[N]Sexplore[!] [dir]... カレントファイルのディレクトリを分割   *:Sexplore*
                              して開く
     :Texplore       [dir]... タブで開く                             *:Texplore*
     :[N]Vexplore[!] [dir]... 垂直分割で開く                         *:Vexplore*

     :Explore **/pattern で開いたときに使うコマンド : (|netrw-starstar|参照)
     :Nexplore............. 次のファイルに移動                      *:Nexplore*
     :Pexplore............. 前のファイルに移動                      *:Pexplore*

:Explore  は、ローカルディレクトリブラウザを開始してカレントファイルのディレク
          トリ (または [dir] で指定されたディレクトリ) を開きます。編集中の
          ファイルに未保存の変更がある場合は新しいウィンドウを作成します。そう
          でない場合は同じウィンドウを使用します。通常、ウィンドウの分割は水平
          分割です。
:Explore! は、:Explore と同じですが、ウィンドウを垂直分割します。
:Sexplore は、常に新しいウィンドウを作成してローカルディレクトリブラウザを開始
          します。Explore と同様、通常はウィンドウは水平分割されます。
:Sexplore! [dir] は、:Sexplore と同じですが、ウィンドウを垂直分割します。
:Hexplore  [dir] は、|:belowright| 水平分割を使って :Explore を実行します。
:Hexplore! [dir] は、|:aboveleft|  水平分割を使って :Explore を実行します。
:Vexplore  [dir] は、|:leftabove|  垂直分割を使って :Explore を実行します。
:Vexplore! [dir] は、|:rightbelow| 垂直分割を使って :Explore を実行します。
:Texplore  [dir] は、ブラウザウィンドウを作成する前に tabnew を実行します。

引数を指定しなかった場合、これらのコマンドはカレントファイルのディレクトリを開
きます。明示的にディレクトリ (path) を指定することもできます。

[N] は新しいエクスプローラウィンドウの幅/高さを指定します。これは
|g:netrw_winsize| よりも優先されます。

幅指定がない場合は、|g:netrw_winsize| 変数が (設定されているなら)、新しいエク
スプローラウィンドウの幅/高さとして使用されます。

:Rexplore  このコマンドは他のコマンドとは少し違います。例えば、netrw ブラウザ
           ウィンドウで <cr> を押してファイルを開いたとき、:Rexplore を実行す
           ると、最後に表示していたブラウザ画面に戻ることができます。これは
           <2-leftmouse> のコマンド版です (<2-leftmouse> はマウス対応端末か
           gvim でしか使えません)。


*netrw-star* *netrw-starpat* *netrw-starstar* *netrw-starstarpat*
スターとパターンを使った探索

Explore, Sexplore, Hexplore, Vexplore それぞれのコマンドで、次のようなパターン
が使われた場合、Explore はそれにマッチするようなファイルのリストを生成します。
>
    */filepat	カレントディレクトリの、filepat にマッチするファイル
    **/filepat	カレントディレクトリとそれ以下のディレクトリの、filepat にマッ
		チするファイル
    *//pattern	カレントディレクトリの、pattern を含んでいるファイル (vimgrep
		が使用されます)
    **//pattern	カレントディレクトリとそれ以下のディレクトリの、pattern を含ん
		でいるファイル (vimgrep が使用されます)
<
カーソルはリストの最初のファイルの上に置かれます。|:Nexplore| でファイルリスト
の次のファイルへ、|:Pexplore| で前のファイルへ移動できます。netrw はディレクト
リやカーソル位置を適切に更新します。

引数を付けずに >
	:Explore
と実行すると、ファイルリストがクリアされます。

あなたのコンソールまたは gui が shift-up と shift-down を解釈できるなら、
shift-downarrow と shift-uparrow を使うと便利でしょう。
次のマップが netrw によって定義されます:

	<s-down>  == Nexplore
	<s-up>    == Pexplore

例
>
	:Explore */*.c
	:Nexplore
	:Nexplore
	:Pexplore
<
ステータスラインの右の方に "Match 3 of 20" のようなメッセージが表示されます。

関連設定: |g:netrw_keepdir|      |g:netrw_browse_split|
          |g:netrw_fastbrowse|   |g:netrw_ftp_browse_reject|
	  |g:netrw_ftp_list_cmd| |g:netrw_ftp_sizelist_cmd|
	  |g:netrw_ftp_timelist_cmd| |g:netrw_list_cmd|
	  |g:netrw_liststyle|


ファイルの情報を表示する					*netrw-qf* {{{2

ファイル名の上にカーソルを移動して "qf" を押すと、ファイルのサイズと最終更新日
時が表示されます。現在、この機能はローカルファイルのみ対応しています。


隠しリストを編集する			*netrw-ctrl-h* *netrw-edithide* {{{2

"<ctrl-h>" マップを使うと、|g:netrw_list_hide| に設定されたファイル/ディレクト
リの隠しリストを変更できます。隠しリストはパターンをカンマで区切ったものです。
パターンにマッチしたファイル/ディレクトリは表示されなくなります。あるいはマッ
チしたファイルのみを表示することができます (|netrw-a|参照)。

"gh" マップ (|netrw-gh|参照) を使うと、通常の隠しリストの使用と "." で始まる
ファイル/ディレクトリを非表示にするのを切り替えることができます。

例: >
	let g:netrw_list_hide= '\(^\|\s\s\)\zs\.\S\+'
これは |netrw-gh| コマンドの初期設定での動作と実質的に同じになります。
解説:

	\(^\|\s\s\)   : 行頭または連続した二つの空白文字が見つかったら
	\zs           : その場所からマッチを開始して
	\.            : ドットで始まり
	\S\+          : 一つ以上の非空白文字が続く名前にマッチする

関連設定: |g:netrw_hide| |g:netrw_list_hide|
関連項目: |netrw-a| |netrw-gh| |netrw-mh|


ソートシーケンスを編集する		*netrw-S* *netrw-sortsequence* {{{2

"Sorted by" が name (名前順ソート) のとき 、g:netrw_sort_sequence を設定するこ
とで優先順位を指定できます。ソートシーケンスは典型的には順位の高い順に拡張子を
並べたもので、パターンを使うこともできます。パターンはカンマで区切ります。ソー
トシーケンスの初期設定は次のとおり (実際にはすべて一行):

For Unix: >
	'[\/]$,\<core\%(\.\d\+\)\=,\.[a-np-z]$,\.h$,\.c$,\.cpp$,*,\.o$,\.obj$,
	\.info$,\.swp$,\.bak$,\~$'
<
その他: >
	'[\/]$,\.[a-np-z]$,\.h$,\.c$,\.cpp$,*,\.o$,\.obj$,\.info$,
	\.swp$,\.bak$,\~$'
<
単に * だけが指定されている場合は他のパターンにマッチしなかったすべてのファイ
ルがマッチします。ソートシーケンスを変更するには、g:netrw_sort_sequence 変数を
設定するか (手動または <.vimrc> で設定)、"S" マップを使います。

関連項目: |netrw-s|               |netrw-S|
関連設定: |g:netrw_sort_sequence| |g:netrw_sort_options|


親ディレクトリに移動する					*netrw--* {{{2

親ディレクトリに移動するには "-" を押すか、ファイル一覧の ../ ディレクトリの上
で <cr> を押します。

netrw は |g:netrw_list_cmd| を使ってディレクトリ一覧を取得します。変数の
HOSTNAME の部分は実際の url に置き換えられます。初期設定は次のとおり:

	ssh HOSTNAME ls -FLa

HOSTNAME の部分は実際のリクエストの [user@]hostname に置換されます。設定は必要
に応じて変更してください。ディレクトリ名の末尾にはスラッシュが付くことが想定さ
れています。


ファイル/ディレクトリを隠すにする		*netrw-a* *netrw-hiding* {{{2

Netrw のブラウジングでは隠しリストを使う方法が三つあります: 使用しない、マッチ
したファイルを隠す、マッチしたファイルのみを表示する。

ファイルが |netrw-mf| によってマークされていない場合:

"a" マップを使うと三つの表示モードが順番に切り替わります。

|g:netrw_list_hide| 変数にはカンマで区切られた正規表現に基づくパターンのリスト
(例 ^.*\.obj$,^\.) が設定されます。隠しリストを設定するには <c-h> マップを使い
ます (|netrw-ctrl-h|参照)。例えば、 "." で始まるファイルを非表示にしたい場合、
<c-h> を押して隠しリストに '^\..*' を設定します (あるいは <.vimrc> で
let g:netrw_list_hide= '^\..*' を設定する)。そして、"a" キーを押して表示を切り
替えます (すべてのファイルを表示、マッチしたファイルを隠す、マッチしたファイル
のみ表示。

	例: \.[ch]$
		すべての *.c *.h ファイルを表示/非表示する。

	例: \.c$,\.h$
		同上。すべての *.c *.h ファイルを表示/非表示する。

表示モード (normal/hiding/show) の切り替えは "a" マップです。忘れないで！

ファイルが |netrw-mf| によってマークされている場合、次のように動作します:

  すべてのファイルを表示 or 隠しファイル非表示の場合:
    マークされたファイルを g:netrw_list_hide に追加し、
    隠しファイル非表示モードにする

  隠しファイルのみ表示の場合:
    マークされたファイルを g:netrw_list_hide から削除し、
    隠しファイル非表示モードにする

					*netrw-gh* *netrw-hide*
次のコマンドを使うと
	gh
ドットで始まるファイルを非表示にするかどうかを簡単に切り替えることができます。

関連設定: |g:netrw_list_hide|
関連項目: |netrw-a| |netrw-ctrl-h| |netrw-mh|

ブラウジングを改善する			*netrw-listhack* *netrw-ssh-hack* {{{2

リモートディレクトリをブラウジングするときなどに、操作の度にパスワードを入力す
るのは面倒です。

Linux/Unix システム向けには

  「Linux Server Hacks - 100 industrial strength tips & tools"」
  Rob Flickenger 著
  O'Reilly, ISBN 0-596-00461-3

日本語版は
  「LinuxサーバHacks—プロが使うテクニック&ツール100選」
  翻訳: 山口晴広、イメージズアンドワーズ
  ISBN-10: 487311151X
  ISBN-13: 978-4873111513

に、 ssh と scp のパスワードを省略するための設定と、セキュリティ関係の議論があ
ります。以前は http://hacks.oreilly.com/pub/h/66 で参照できましたが、現在この
アドレスは "hackzine" へのリダイレクトになっています。
記事の内容と Ben Schmidt とのやりとりを要約します:

	1. ローカルマシン (sshクライアント) でパブリックキーとプライベートキー
	   のペアを生成する: >
		ssh-keygen -t rsa
		(プロンプトに従ってファイルが ~/.ssh/id_rsa に保存されます)
<
	2. パスフレーズを聞かれる (二度) のでそのまま <CR> を押してパスフレー
	   ズを空にする。もしパスフレーズを設定するなら、ssh-agent を使うこと
	   でパスフレーズの入力をセッションごとに一度だけで済ますことができま
	   す。パスフレーズを設定しなかった場合、あなたのローカルコンピュータ
	   にログインするか、あるいはキーファイルにアクセスできれば、そのキー
	   ファイルが登録された ssh サーバーにアクセスできます。

	3. 二つのファイルが作成される: >
		~/.ssh/id_rsa
		~/.ssh/id_rsa.pub
<
	4. ターゲットマシン (sshサーバー) での操作: >
		cd
		mkdir .ssh
		chmod 0700 .ssh
<
	5. ローカルマシン (sshクライアント) での操作: (一行で入力) >
		ssh {serverhostname}
		  cat '>>' '~/.ssh/authorized_keys2' < ~/.ssh/id_rsa.pub
<
次のコマンドで接続テストします: >
	ssh {serverhostname}
他に何も入力しないでサーバーマシンにログインできるはずです。

パスフレーズを設定している場合は次のようにします: >
	ssh-agent $SHELL
	ssh-add
	ssh {serverhostname}
ssh-add を実行するとパスフレーズを入力するプロンプトが表示されます。そして、
ssh を使うときはそれは表示されません。vim で使うときは、次のようにもできます >
	ssh-agent vim
そして、vim の中で次のコマンドを実行します >
	:!ssh-add
あるいは、vim を実行する予定の端末に ssh-agent を適用する方法もあります: >
	ssh-agent xterm &
そして、必要になったところで ssh-add を実行してください。

Windows 向けには、vim メーリングリストにおいてパスワードの省略には Pagent を使
うのがいいという話がありました。

Kingston Fung 氏がパスワードを省略する別の方法について書いています:

    scp を使うたびにパスワードを入力しなくてもよくするには、ドキュメントにある
    ハックで空パスワードの ssh アカウントを作成する方法もあるが、もっといい方
    法がある。この方法では通常のパスワード付き ssh アカウントを使い、パスワー
    ドなしで操作を行える。これはセキュアかつ便利だ。方法としては、ssh パブリッ
    クキー認証と ssh-agent を使う。詳しくはリンク先を見て欲しい。

    http://www.ibm.com/developerworks/library/l-keyc2/
    http://sial.org/howto/openssh/publickey-auth/


ブックマークと履歴を一覧表示する	*netrw-qb* *netrw-listbookmark* {{{2

"qb" (query bookmarks) を押すと、ブックマークされたディレクトリと移動履歴の一
覧が表示されます。

関連項目:
	|netrw-gb| ブックマークに戻る (移動する)
	|netrw-mb| ブックマークを設定する
	|netrw-mB| ブックマークを削除する
	|netrw-u|  表示履歴の前のディレクトリに移動する
	|netrw-U|  表示履歴の次のディレクトリに移動する


新しいディレクトリを作成する				*netrw-d* {{{2

"d" マップを使うと新しいディレクトリを作成できます (リモート操作は
g:netrw_mkdir_cmd 変数に依存。ローカル操作は g:netrw_locak_mkdir に依存)。コマ
ンドを実行すると新しいディレクトリの名前を入力するプロンプトが表示されます。何
も入力せずに <CR> を押すとディレクトリの作成をキャンセルできます。ローカルディ
レクトリを作成するときに既存のファイルまたはディレクトリと同じ名前を指定する
と、エラーが表示され、操作は無視されます。

現在、ftp でのディレクトリ作成はサポートされていません。

関連設定: |g:netrw_local_mkdir| |g:netrw_mkdir_cmd|


ブラウジングディレクトリをカレントディレクトリにする	*netrw-c* {{{2

|g:netrw_keepdir| の初期設定は 1 です。この設定の場合、カレントディレクトリは
ブラウジングディレクトリに合わせて変更されません。

g:netrw_keepdir を 0 に設定すると、ディレクトリを移動する度にカレントディレク
トリが設定されます。

g:netrw_keepdir が 1 のときは netrw のブラウジングディレクトリとカレントディレ
クトリは別々です。二つのディレクトリを同じにするには "c" マップを使います (cを
押すだけ)。このマップは Vim のカレントディレクトリを netrw のブラウジングディ
レクトリに変更します。

関連設定: |g:netrw_keepdir|

ファイルをマークする						*netrw-mf* {{{2
	(|netrw-mr|も参照)

ファイルにマークを設定するにはファイル名の上で "mf" を押します。gvim では
<s-leftmouse> でマークを設定することもできます。マークしたファイルは以下のマッ
プで操作できます:

    |netrw-a|	ファイル/ディレクトリを隠す
    |netrw-D|	ファイル/ディレクトリを削除する
    |netrw-mc|	ファイルをターゲットディレクトリにコピーする
    |netrw-md|	マークしたファイルに vimdiff を適用する
    |netrw-me|	マークしたファイルを開く
    |netrw-mg|	マークしたファイルに vimgrep を適用する
    |netrw-mm|	マークしたファイルを移動する
    |netrw-mp|	マークしたファイル印刷する
    |netrw-mt|	|netrw-mm| または |netrw-mc| 用のターゲットを設定する
    |netrw-mT|	マークしたファイルのタグを生成する
    |netrw-mx|	マークしたファイルにシェルコマンドを適用する
    |netrw-mz|	マークしたファイルを圧縮/伸長する
    |netrw-O|	マークしたファイルを取得する
    |netrw-R|	マークしたファイルの名前を変更する

マークを解除したいときはマークを設定したときと同様に、ファイル名の上で "mf" を
押します。gvim では <s-leftmouse> も使えます。すべてのマークを解除するには
"mu" を使います (|netrw-mu|参照)。

*markfilelist* *global_markfilelist* *local_markfilelist*
マークされたすべてのファイルはグローバルマークファイルリストに記録されます。グ
ローバルリストは一つだけ存在します。さらに、すべての netrw バッファはローカル
マークファイルリストを持っています。netrw バッファは特定のディレクトリと結びつ
いているので、ディレクトリごとにローカルマークファイルリストが存在することにな
ります。マークされたファイルに対する操作はグローバル、またはローカルのマーク
ファイルリストに作用します。


正規表現を使ってファイルをマークする				*netrw-mr* {{{2
	(|netrw-mf|も参照)

正規表現を使ってファイルをマークするには "mr" を使います。"mr" を押すと "Enter
regexp: " というプロンプトが表示されるので、例えば *.c$ のようなシェル形式の正
規表現 (|glob()| 参照) を入力します。リモートシステムに対しては glob() は使え
ないので、netrw は "*" を ".*" に変換し (|regexp| 参照)、それを使ってファイル
をマークします。将来的には glob() スタイルではなく |regexp| スタイルの正規表現
を使えるようにする予定です (また別のオプションで)。


マークファイル: 任意のコマンド				*netrw-mx* {{{2
	     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)
		      (ローカルマークファイルリスト使用)

"mx" マップを実行すると(外部)コマンドを入力するためのプロンプトが表示され、
マークしたファイルに対して入力したコマンドが実行されます。コマンド文字列内のす
べての "%" は実行ごとにファイル名に置換されます。"%" が無い場合はコマンドの後
ろにスペースとファイル名が付けられます。


マークファイル: 圧縮と伸長				*netrw-mz* {{{2
	     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)
		      (ローカルマークファイルリスト使用)

マークされたファイルが圧縮されている場合、"mz" はファイルを伸長します。
マークされたファイルが圧縮されていない場合、"mz" はファイルを圧縮します。
圧縮コマンドは |g:netrw_compress| で設定できます。初期設定は "gzip" です。

伸長には、拡張子と伸長コマンドを関連付けた |Dictionary| が使われます。
|g:netrw_decompress| 参照。

関連設定: |g:netrw_compress| |g:netrw_decompress|

マークファイル: コピー						*netrw-mc* {{{2
	     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)
		     (グローバルマークファイルリスト使用)

mt (|netrw-mt|) でコピー先ディレクトリを選択し、ファイルのあるディレクトリに移
動し、mf (|netrw-mf|) でファイルを選択し、"mc" を押します。

関連設定: |g:netrw_localcopycmd| |g:netrw_ssh_cmd|

マークファイル: DIFF						*netrw-md* {{{2
	     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)
		     (グローバルマークファイルリスト使用)

|vimdiff| を使って選択したファイルの違いを表示します (選択できるファイルは二つ
か三つです)。グローバルマークファイルリストが使われます。

マークファイル: 編集						*netrw-me* {{{2
	     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)
		     (グローバルマークファイルリスト使用)

このコマンドはマークされたファイルを |arglist| に設定し、編集を開始します。
|:Rexplore| でエクスプローラウィンドウに戻ることができます。

マークファイル: GREP						*netrw-mg* {{{2
	     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)
		     (グローバルマークファイルリスト使用)

マークされたファイルに対して |:vimgrep| を適用します。検索パターンを入力するた
めのプロンプトが表示されます。次の形式で入力してください: >
	/pattern/[g][j]
	! /pattern/[g][j]
	pattern
<
拡張子による表示/非表示						*netrw-mh* {{{2
	     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)
		      (ローカルマークファイルリスト使用)

このコマンドは、マークされたファイルの拡張子を隠しリストに追加、または削除しま
す。Note: 同じ拡張子のファイルが複数選択されていた場合はファイルの数だけ追加と
削除が繰り返されます (つまり、同じ拡張子のファイルが偶数個選択されている場合は
それを選択しなかったのと同じ)。

関連項目: |netrw-a| |g:netrw_list_hide|

マークファイル: 移動						*netrw-mm* {{{2
	     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)
		     (グローバルマークファイルリスト使用)

	警告: ファイルの移動はコピーと比べて危険です。ファイルの移動時は、まず
	コピーされ、それから削除されます。コピーが失敗して削除が成功するとファ
	イルが失われます。実際に操作する前に適当なファイルで試してみるか、ある
	いは、mc と D を使って自分でコピーと削除を実行してください。
	自己責任で使ってください。

mt (|netrw-mt|) で移動先ディレクトリを選択し、ファイルのあるディレクトリに移動
し、mf (|netrw-mf|) でファイルを選択し、"mm" を押します。

関連設定: |g:netrw_localmovecmd| |g:netrw_ssh_cmd|

マークファイル: 印刷						*netrw-mp* {{{2
	     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)
		      (ローカルマークファイルリスト使用)

マークされたファイルに対して |:hardcopy| コマンドを実行します。具体的には、そ
れぞれのファイルを一行のウィンドウで開いて、hardcopy を実行し、一行ウィンドウ
を閉じます。


マークファイル: スクリプト実行					*netrw-ms* {{{2
	     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)
		      (ローカルマークファイルリスト使用)

マークされたファイルをスクリプト実行します (Vimの|:source|コマンド使用)


マークファイル: タグ生成					*netrw-mT* {{{2
	     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)
		      (ローカルマークファイルリスト使用)

"mT" マップはマークされたファイルに対して |g:netrw_ctags| で指定されたコマンド
を実行します (初期設定は "ctags")。リモートブラウジングでは、タグファイルを生
成するために ssh が使われます (|g:netrw_ssh_cmd|参照)。したがって、リモートシ
ステムの ssh でコマンドが使えなければなりません。ローカルで使う場合は、|ctags|
を参照して ctags を準備してください。私は個人的に hdrtags を使っています。
hdrtags は http://mysite.verizon.net/astronaut/src/index.html から入手できま
す。これを使う場合は <.vimrc> で次のように設定してください: >

	let g:netrw_ctags= "hdrtag"
<
リモートでタグファイルを生成した場合、タグファイルが "取得" されます。つまり、
ローカルシステムにファイルがコピーされます。そして、ネットワーク越しのファイル
にアクセスできるように、タグファイルが変更されます。変更されるのはタグファイル
内のファイル名で、それぞれのファイル名の前に netrw で扱える形の url が挿入され
ます (urlは元のタグファイルの場所に基づく)。タグ操作 (|tags|) を実行すると、
netrw によって url が開かれ、タグに移動できます。

関連設定: |g:netrw_ctags| |g:netrw_ssh_cmd|


マークファイル: ターゲットディレクトリを設定する		*netrw-mt* {{{2
     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)

ファイルコピー/移動のターゲットを設定する (|netrw-mc|と|netrw-mm| 参照):

  * カーソルがファイルの上にある場合、netrw ウィンドウに表示されているディレク
    トリがターゲットとして設定されます。

  * カーソルがバナーの上にある場合も、netrw ウィンドウに表示されているディレク
    トリがターゲットとして設定されます。

  * カーソルがディレクトリの上にある場合は、そのディレクトリがターゲットとして
    設定されます。

ターゲットは Vim セッションで一つしか設定できません。ターゲットはスクリプト変
数 (|s:var|参照) で管理されており、(Vim のインスタンスごとの) すべての netrw
ウィンドウで共有されます。

マークファイル: マーク解除					*netrw-mu* {{{2
     (マークの設定方法は |netrw-mf| と |netrw-mr| を参照)

"mu" マップを使うと現在設定されているすべてのマークが解除されます。


NETRW ブラウザ変数		*netrw-browser-options* *netrw-browser-var* {{{2

(ファイル転送の設定については |netrw-options| を参照)

netrw ブラウザの各種設定は変数で管理されていて、それを変更することができます。
<.vimrc> などで変数を設定することでブラウザの動作をカスタマイズできます。
(|netrw-settings|も参照)
>
   ----				-----------
   変数				説明
   ----				-----------
< *g:netrw_alto*		分割ウィンドウを(上ではなく)下に開くようにする
				(|netrw-o| 参照)
				 初期設定: =&sb          (|'sb'| 参照)

  *g:netrw_altv*		分割ウィンドウを(左ではなく)右に開くようにする
				(|netrw-v| 参照)
				 初期設定: =&spr         (|'spr'| 参照)

  *g:netrw_banner*		バナーの表示を切り替える
				=0: バナーを表示しない
				=1: バナーを表示する (初期設定)
				NOTE: バナー非表示は新しい機能なので問題が起こ
				るかもしれません。

  *g:netrw_browse_split*	ブラウザで <cr> を押してファイルを開くとき:
				=0: 同じウィンドウを使う
				=1: ウィンドウを水平分割する
				=2: ウィンドウを垂直分割する
				=3: 新しいタブで開く
				=4: "P" で開く (以前のウィンドウで開く)
				    Note: |g:netrw_preview| を使うと (水平分割
				    から変更して) 垂直分割にできます 。

  *g:netrw_browsex_viewer*	ユーザー指定のビューア: >
					"kfmclient exec"
					"gnome-open"
<				値が >
					"-"
<				なら、netrwFileHandler() によってファイルを処
				理するスクリプト/関数が呼ばれます。
				(|netrw_filehandler| 参照)

  *g:netrw_chgperm*		Unix/Linux: "chmod PERM FILENAME"
				Windows:    "cacls FILENAME /e /p PERM"
				ファイルのアクセス権限を変更するのに使われま
				す。

  *g:netrw_compress*		="gzip"
				    ファイル圧縮コマンド

  *g:netrw_ctags*		="ctags"
				タグを作成するための外部コマンド

  *g:netrw_cursorline*		= 1 (初期設定)
				以下の表示スタイルで |'cursorline'| を使う
				|g:netrw_liststyle| ==0 (thin listing) or
				|g:netrw_liststyle| ==1 (long listing) or
				|g:netrw_liststyle| ==3 (tree listing)
				(つまり wide 表示では使用されません)
				=0: off
				=2: 1 と同じですが、wide 表示で cursorline と
				|'cursorcolumn'| を使う

  *g:netrw_decompress*		= { ".gz" : "gunzip" ,
				    ".bz2" : "bunzip2" ,
				    ".zip" : "unzip" ,
				    ".tar" : "tar -xf"}
				  拡張子と伸長プログラムを関連付ける辞書

  *g:netrw_fastbrowse*		=0: 低速ディレクトリブラウジング
				    ファイル一覧を再利用しない
				    常にファイル一覧取得を行う
				=1: 中速ディレクトリブラウジング
				    リモートディレクトリのみファイル一覧を再利
				    用する。
				    (初期設定)
				=2: 高速ディレクトリブラウジング
				    未取得のディレクトリ (または|netrw-ctrl-l|
				    が使われたとき) のみファイル一覧を取得す
				    る。

				高速ブラウジングは古いファイル一覧バッファを保
				持し、再取得処理を実行しません。これは特にリ
				モートブラウジングで重要になります。ファイルが
				作成/削除されるとファイル一覧バッファは不正確
				な情報になります。|netrw-ctrl-l| を使うことで
				ファイル一覧を更新できます。
				この設定によって正確さ (常に最新) とスピードの
				トレードオフを選択できます。

  *g:netrw_fname_escape*	=' ?&;%'
				リモートで読み/書きするときにファイル名をエス
				ケープするのに使われる。

  *g:netrw_ftp_browse_reject*	ftp がエラーや警告を出力すると、それがファイル
				やディレクトリとして一覧に表示されてしまいま
				す。この変数に設定したパターンを使ってそれらの
				メッセージが取り除かれます。初期設定は以下のと
				おり:
				 '^total\s\+\d\+$\|
				 ^Trying\s\+\d\+.*$\|
				 ^KERBEROS_V\d rejected\|
				 ^Security extensions not\|
				 No such file\|
				 : connect to address [0-9a-fA-F:]*
				 : No route to host$'

  *g:netrw_ftp_list_cmd*	ftp に渡されるファイル一覧取得コマンド。
				初期設定:
				 unix or g:netrw_cygwin set: : "ls -lF"
				 そうでない場合                "dir"


  *g:netrw_ftp_sizelist_cmd*	ftp に渡されるファイル一覧取得コマンド。ファイ
				ルサイズでソートする。
				初期設定:
				 unix or g:netrw_cygwin set: : "ls -slF"
				 そうでない場合                "dir"

  *g:netrw_ftp_timelist_cmd*	ftp に渡されるファイル一覧取得コマンド。最終更
				新日時でソートする。
				初期設定:
				 unix or g:netrw_cygwin set: : "ls -tlF"
				 そうでない場合                "dir"

  *g:netrw_glob_escape*		='[]*?`{~$'  (unix)
				='[]*?`{$'  (windows
				設定された文字がディレクトリ名に使われていたら
				glob() を適用する前にエスケープされる。

  *g:netrw_hide*		true なら、隠しリストが使用される
				 初期設定: =0

  *g:netrw_home*		ブックマークと履歴 (.netrwbook と .netrwhist)
				を保存するホームディレクトリ。
				初期設定: |'runtimepath'| の最初のディレクトリ

  *g:netrw_keepdir*		=1 (初期設定) カレントディレクトリとブラウジン
				   グディレクトリを別にする
				=0 カレントディレクトリとブラウジングディレク
				   トリを同じにする。
				現在のブラウジングディレクトリはb:netrw_curdir
				に保存されます。 (|netrw-c| 参照)

  *g:netrw_list_cmd*		リモートディレクトリのファイル一覧取得コマンド
				 初期設定: (sshがあるなら)
				          "ssh HOSTNAME ls -FLa"

  *g:netrw_liststyle*		デフォルトのファイル一覧表示スタイル:
                                = 0: thin listing (一行に一つのファイル)
                                = 1: long listing (一行に一つのファイル、タイ
				     ムスタンプ、ファイルサイズ)
				= 2: wide listing (一行に複数のファイル)
				= 3: tree style listing (ツリー表示)
  *g:netrw_list_hide*		隠しファイル用のパターンのリスト(カンマ区切り)
				パターンは正規表現です (|regexp|参照)
				例: let g:netrw_list_hide= '.*\.swp$'
				 初期設定: ""

  *g:netrw_localcopycmd*	="cp" Linux/Unix/MacOS/Cygwin
				="copy" Windows
				マークされたファイル (|netrw-mf|) をターゲット
				ディレクトリにコピー (|netrw-mt|, |netrw-mc|)

  *g:netrw_localmovecmd*	="mv" Linux/Unix/MacOS/Cygwin
				="move" Windows
				マークされたファイル (|netrw-mf|) をターゲット
				ディレクトリに移動 (|netrw-mt|, |netrw-mm|)

  *g:netrw_local_mkdir*		ローカルディレクトリ作成コマンド
				 初期設定: "mkdir"

  *g:netrw_local_rmdir*		ディレクトリ削除コマンド (rmdir)
				 初期設定: "rmdir"

  *g:netrw_maxfilenamelen*	初期設定は 32。 long スタイルでの表示を 80 カ
				    ラムのディスプレイに収められるような値。
				大きい画面を使っているか、32 バイトより長い名
				前のファイル/ディレクトリがあるなら、このオプ
				ションを設定して表示を調整するといいでしょう。

  *g:netrw_mkdir_cmd*		リモートディレクトリ作成コマンド
				 初期設定: "ssh USEPORT HOSTNAME mkdir"

  *g:netrw_mousemaps*		=1 (初期設定) ブラウジングでマウスボタンを有効
				   にする:
				     左クリック      : ファイル/ディレクトリを
				                       開く
				     Shift-左クリック: ファイルをマークする
				     中クリック      : P と同じ
				     右クリック      : ファイル/ディレクトリを
				                       削除
				=0: マウスのマップを無効にする

  *g:netrw_retmap*		この変数が存在し、その値が 1 なら:
				 * netrw でファイルを開いたとき
				 * <2-leftmouse> のノーマルモードのマップが他
				   に定義されていない
				という場合、netrw ブラウザウィンドウに戻るため
				の機能として <2-leftmouse> マップが設定されま
				す。
				 例: クリックしてファイルを開き、ダブルクリッ
				     クで戻る。

				Note: <2-leftmouse> 以外のキーを割り当てたい場
				合は:
				 * let g:netrw_retmap= 1
				 * nmap <silent> 好きなキー <Plug>NetrwReturn
				を設定してください。

				|:Rexplore| コマンドを使っても同じことができま
				す。

				  初期設定: =0

  *g:netrw_rm_cmd*		ファイル削除コマンド
				 初期設定: "ssh USEPORT HOSTNAME rm"

  *g:netrw_rmdir_cmd*		ディレクトリ削除コマンド
				 初期設定: "ssh USEPORT HOSTNAME rmdir"

  *g:netrw_rmf_cmd*		ソフトリンク削除コマンド
				 初期設定: "ssh USEPORT HOSTNAME rm -f"

  *g:netrw_sort_by*		ソートの種類 ("name" or "time" or "size")
				 初期設定: "name"

  *g:netrw_sort_direction*	ソートの順序: "normal" or "reverse"
				 初期設定: "normal"

  *g:netrw_sort_options*	ソートには |:sort| が使われます。この変数に設
				定された値はソートコマンドに追加されます。例え
				ば .vimrc で次のように設定すると、大文字小文字
				を無視できます: >
					let g:netrw_sort_options="i"
<				 初期設定: ""

  *g:netrw_sort_sequence*	名前でソートするとき、まずこの変数で指定された
				パターンを使ってソートする。カンマで区切られた
				パターンのリスト。Note: ソート時のファイル名に
				はファイルタイプを示す装飾文字
				(|netrw-filigree|) が含まれます。
				 初期設定: '[\/]$,*,\.bak$,\.o$,\.h$,
				            \.info$,\.swp$,\.obj$'

  *g:netrw_special_syntax*	true なら、特定の種類のファイルが特別な色(シン
				タックス)で表示されます:

					netrwBak     : *.bak
					netrwCompress: *.gz *.bz2 *.Z *.zip
					netrwData    : *.dat
					netrwHdr     : *.h
					netrwLib     : *.a *.so *.lib *.dll
					netrwMakefile: [mM]akefile *.mak
					netrwObj     : *.o *.obj
					netrwTags    : tags ANmenu ANtags
					netrwTilde   : *~
					netrwTmp     : tmp* *tmp

				これらの構文ハイライトグループは、初期設定では
				Folded か DiffChange へのリンクです。
				(|hl-Folded| と |hl-DiffChange| 参照)
				例えば <.vimrc> で次のように設定することで >
					hi link netrwCompress Visual
<				好みの配色を設定できます。

  *g:netrw_ssh_cmd*		リモートアクセス時に ssh として使われる実行可
				能ファイル。ファイル一覧取得やファイル削除など
				に使われます。
				 初期設定: ssh

  *g:netrw_ssh_browse_reject*	ssh の出力に不要なテキスト (メッセージ、バナー
				等) が混ざっていて、それらがディレクトリやファ
				イルとして認識されると困ります。この変数に設定
				されたパターンを使って余計なメッセージを取り除
				きます。
				初期設定:
					 '^total\s\+\d\+$'


  *g:netrw_tmpfile_escape*	=' &;'
				一時ファイルを escape() で処理するときに使われ
				るエスケープ文字列。

  *g:netrw_timefmt*		Vim の strftime() で使用するフォーマット文字列
				を指定します。初期設定は "%c" で、これは手元の
				strftime() のマニュアルページによれば "現在の
				ロケールにおいて一般的な日付・時刻の表記" で
				す。"%c" の結果に不満な場合は例えば次のような
				設定が便利でしょう:
				 "%a %d %b %Y %T",
				 " %a %Y-%m-%d  %I-%M-%S %p"
				 初期設定: "%c"

  *g:netrw_use_noswf*		netrw のブラウザバッファではスワップファイルを
				使わないようにしています。しかし、あるシステム
				ではそれによって ml_get エラーが発生することが
				あります。そのようなエラーが出た場合は .vimrc
				で次のように設定してみてください
				  let g:netrw_use_noswf= 0

  *g:netrw_winsize*		ウィンドウを作成したときの初期サイズ。"o"
				(|netrw-o|), "v" (|netrw-v|), |:Hexplore|,
				|:Vexplore| で使用。
				 初期設定: ""

  *g:netrw_xstrlen*		マルチバイト文字列の長さを計算する方法を指定す
				る。 (thanks to N Weibull, T Mechelynck)
				=0: Vim の組み込み関数 strlen() を使う
				=1: 文字数。(Latin a + combining circumflex は
				    二文字)(初期設定)
				=2: 文字数。(Latin a + combining circumflex は
				    一文字。タブ文字は 1。CJK文字は全角半角と
				    もに 1。...)
				=3: 表示幅 (タブ文字は 1 から |'tabstop'| まで
				    の可変幅。CJK文字は全角は 2、その他は 1。
				    アラビア文字の alif は、lam が前置されてい
				    る場合は 0、そうでなければ 1。...)

  *g:NetrwTopLvlMenu*		トップレベルメニューの名前を指定する。初期設定
				は "Netrw."。これを変更したい場合は .vimrc で
				設定してください。

NETRW ブラウザとオプション設定の互換性		*netrw-incompatible* {{{2

Netrw 内部でオプションを変更するときは、ユーザー設定を保存してから netrw 用の
値を設定し、後で元に戻すという方法が使われます。しかし、autochdirオプション: >
	:set acd
の扱いには問題があります。autochdir は開いているファイルが置かれているディレク
トリをカレントディレクトリとして設定しますが、これはディレクトリを開いたときも
適用されます。つまり、autochdir によってファイル (それがディレクトリであって
も) が置かれているディレクトリがカレントディレクトリとして設定されてしまいま
す。

NETRW の設定						*netrw-settings* {{{2

NetrwSettings.vim プラグインのコマンド >
	:NetrwSettings
を実行すると、netrw の設定変数が表示されたウィンドウが表示されます。値を編集し
てファイルを保存すると設定が反映されます。それぞれの変数の上で "?" を押すとそ
の変数のヘルプが表示されます。

(参照: |netrw-browser-var| |netrw-protocol| |netrw-var| |netrw-variables|)


==============================================================================
ファイルを取得する					*netrw-O* {{{2

マークされたファイルがない場合:

    リモートディレクトリを表示しているとき、ファイル名の上で O を押すことで
    ファイルを取得できます (ローカルマシンにファイルがコピーされる。編集は開始
    されない)。

マークされたファイルがある場合:

    マークされたファイルが取得されます (ローカルマシンにファイルがコピーされ
    る。編集は開始されない)。

この操作は ftp と scp でサポートされています  (ブラウジングが動作しているなら
問題なく使えるはずです)。ステータスラインの右側に "Obtaining filename" のよう
なメッセージが表示されます。ファイル転送が完了するとステータスラインは元に戻り
ます。

ローカルマシンのファイルを "取得" することもできます。<.vimrc> で
|g:netrw_keepdir| が 0 に設定されていなければ、Netrw では Vim のカレントディレ
クトリとは別のディレクトリを表示できます。ローカルブラウザでファイルを選択
(ファイル名の上にカーソルを移動) し、"O" を押すことで、ファイルを "取得" (Vim
のカレントディレクトリにコピー) できます。

関連項目:
 * カレントディレクトリを確認するには: |:pwd| 参照。
 * ブラウザで表示しているディレクトリをカレントディレクトリにしたい場合は:
   |netrw-c| 参照。
 * ブラウザで表示しているディレクトリをカレントディレクトリに自動的にしたい場
   合は: |g:netrw_keepdir| 参照。


NETRW のカレントディレクトリで新しいファイルを作成する	*netrw-%*

netrw のカレントディレクトリで新しいファイルを作成するには "%" を押します。
ファイル名を入力するためのプロンプトが表示されます。指定した名前の空のファイル
が netrw のカレントディレクトリ (b:netrw_curdir) に作成されます。


プレビューウィンドウ			*netrw-p* *netrw-preview* {{{2

ファイルの上で "p" キーを押すと、そのファイルをプレビューウィンドウで開くこと
ができます。ブラウザウィンドウとは別にファイルを表示するウィンドウが作成されま
す (|:pedit|参照。カーソルは移動しません)。初期設定ではウィンドウは水平分割さ
れます。|g:netrw_preview| を設定することで垂直分割に変更できます。

netrw を次のように設定すると便利かもしれません: >

	let g:netrw_preview   = 1
	let g:netrw_liststyle = 3
	let g:netrw_winsize   = 30

これは:
	1. ファイルのプレビューを垂直分割で開く。
	2. デフォルトの一覧表示スタイルを "tree" にする。
	3. 垂直分割でプレビューウィンドウを開いたときに、ディレクトリの一覧表
	   示ウィンドウは 30 列の幅しか使わないので、残りの領域をプレビュー
	   ウィンドウの表示に使用できる。

以前のウィンドウ			*netrw-P* *netrw-prvwin* {{{2

ファイル/ディレクトリを以前の (最後にアクセスした) ウィンドウ (:he |CTRL-W_p|)
で開くには、"P" を押します。ウィンドウが一つしかない場合は、新しいウィンドウが
水平分割で作成されます (分割位置は |g:netrw_alto| で設定できます。ウィンドウの
初期サイズは |g:netrw_winsize| で設定できます)。

ウィンドウが複数ある場合は、以前のウィンドウを使ってファイル/ディレクトリが開
かれます。以前のウィンドウで表示されているバッファに未保存の変更があり、その
バッファを表示しているウィンドウが一つだけの場合、バッファを保存するかどうかを
尋ねるプロンプトが表示されます (yes, no, または cancel)。


一覧を更新する				*netrw-ctrl-l* *netrw-ctrl_l* {{{2

ローカル/リモートのディレクトリのファイル一覧は、ctrl-l (<c-l>) を押すか、一覧
の ./ の上で <cr> を押すことで更新できます。":e ." でローカルディレクトリを更
新することもできます。


ファイルの名前を変更する	*netrw-move* *netrw-rename* *netrw-R* {{{2

マークされたファイルがない場合: (|netrw-mf| 参照)

    移動 (名前変更) したいファイル/ディレクトリにカーソルを移動して "R" を押し
    ます。プロンプトが表示されるのでファイル/ディレクトリの移動先を入力してく
    ださい。"V" コマンド (ビジュアル選択) で複数の行を選択して "R" を使うこと
    もできます。

マークされたファイルがある場合: (|netrw-mf| 参照)

    マークされたファイルを移動 (名前変更) します。プロンプトが表示されるので
    ファイル/ディレクトリの移動先を入力してください。

    警告:~

    Note: ファイルの移動はコピーと比べて危険です。なぜなら、リモートのファイル
    を "移動" するとき、実際には コピー + 削除 を実行しているからです。コピー
    が失敗して削除が成功するとファイルが失われます。

g:netrw_rename_cmd 変数で名前変更のコマンドを指定できます。初期設定は次のとお
り:

	ssh HOSTNAME mv

V (|linewise-visual|) で選択することで複数のファイル/ディレクトリを名前変更で
きます。


ソートの順番を逆にする		*netrw-r* *netrw-reverse* {{{2

"r" キーを押すことでソートの順番を昇順/降順に切り替えることができます。

関連項目:  |netrw-s|
関連設定: |g:netrw_sort_direction|


ソートの種類を変更する			*netrw-s* *netrw-sort* {{{2

ファイル一覧は名前、時間、ファイルサイズのいずれかでソートできます。"s" マップ
を使うことでソートの種類を順番に切り替えることができます。ファイルの一覧は自動
的に更新されます。

関連項目:  |netrw-r| |netrw-S|
関連設定: |g:netrw_sort_by| |g:netrw_sort_sequence|


ファイルを開くウィンドウを指定する			*netrw-C* {{{2

ファイルを開くウィンドウを指定するには、netrw ウィンドウで "C" マップを押す
か、g:netrw_chgwin にウィンドウ番号を設定します。ファイルを開く (|netrw-cr|)
と、指定されたウィンドウが使われます。

関連項目:	|netrw-cr|
関連設定:	|g:netrw_chgwin|


10. 問題と対策						*netrw-problems* {{{1

	(何かフィードバックがあればこの項に追加していきます)
	(|netrw-debug| も参照)
								*netrw-p1*
	P1. Windows 95 を使っています。ftp が読み込みのたびに末尾に四行の空行
	    を出力します。

		|netrw-fixup| を見て、次の設定を <.vimrc> に加えてください:

			let g:netrw_win95ftp= 1

								*netrw-p2*
	P2. Windows を使っています。ftp を使ったブラウジングで時間やサイズで
	    ソートできません。- あるいは - リモートシステムが Windows サーバー
	    なんですが、時間やサイズでソートできません。

		Windows の ftp の ls には最低限の機能しかありません (ソートオ
		プションが使えない等)。注釈文字を得るための -F もサポートされ
		ていません (例えば ABC がディレクトリなら ABC/ になる機能)。
		そのため、Netrw は "dir" を使って thin と long スタイルの一覧
		を取得します。あなたの ftp がこれらの機能をサポートしているな
		ら、<.vimrc> に次の設定を書いてください: >

			let g:netrw_ftp_list_cmd    = "ls -lF"
			let g:netrw_ftp_timelist_cmd= "ls -tlF"
			let g:netrw_ftp_sizelist_cmd= "ls -slF"
<
		あるいは、あなたの Windows に cygwin がインストールされている
		なら、<.vimrc> に次の設定を書いてください: >

			let g:netrw_cygwin= 1
<
		この問題はリモートシステムが Windows だった場合にも起こりま
		す。その場合、以上のように g:netrw_ftp_[time|size}list_cmd を
		設定しても、リモートシステムは期待した動作をしないでしょう。


								*netrw-p3*
	P3. rcp://user@host/ (あるいは他の ftp 以外のプロトコル) を指定したの
	    に netrw は ssh を使おうとする。

		Netrw はリモートディレクトリを表示する方法として ssh と ftp を
		使います。ftp 以外が指定された場合は ssh が使われます。(ファイ
		ル一覧取得ではなく) ファイルをダウンロードするときに、指定され
		たプロトコルが使われます。

								*netrw-p4*
	P4. ファイル一覧の表示スタイルを long をデフォルトにしたい。

		|.vimrc| に次のコマンドを書いてください: >

			let g:netrw_liststyle= 1
<
		他にもいろいろカスタマイズできます。|netrw-browser-var| を参照
		してください。

								*netrw-p5*
	P5. ローカルブラウザでの時間の表示がおかしい

		あなたのシステムの strftime() は "%c" を指定したときに "Sun
		Apr 27 11:49:23 1997" のような出力を返しますか？ そうでない場
		合は、"man strftime" を実行して適切なオプションを確認してくだ
		さい。そして、|.vimrc| にその設定を書いてください: >

			let g:netrw_timefmt= "%X"  (X は調べたオプション)
<
								*netrw-p6*
	P6. ブラウザで移動するごとにカレントディレクトリを設定したい。

	    次の設定を |.vimrc| に書いてください:
>
		let g:netrw_keepdir= 0
<
								*netrw-p7*
	P7. ファイル名に中国語 (などの非 ascii) の文字が使われていると、netrw
	    (Explore, Sexplore, Hexplore, etc) でそれが表示されない。

		(Vim メーリングリストでの Wu Yongwei 氏による回答)
		問題は確認できました。936 以外のコードページを使っていません
		か？ Windows の Unicode版 API に対応していない他のアプリケー
		ション同様、どうやら Vim ではカレントコードページの文字以外は
		使えないようです。これは OS の問題です。最近の Linux ディスト
		リビューションのような UTF-8 ロケールが使えるシステムではこの
		ような問題は起こらないでしょう。

		(こういうのが utf-8 が推奨される理由の一つです)

								*netrw-p8*
	P8. "ssh is not executable on your system" (ssh という実行可能ファイル
	    がない) って表示されるんだけど、どうすればいいの？

		(Dudley Fox) 私の知る限りほとんどの windows ユーザーは ssh と
		して putty を使っています。putty はフリーの ssh/telnet アプリ
		ケーションです。詳しくは url を参照してください。

		http://www.chiark.greenend.org.uk/~sgtatham/putty/

		(Marlin Unruh) このプログラムは私のところでも動作しました。実
		行ファイル一つなので、Windows\System32 フォルダにコピーして
		ショートカットを作っておくといいかも。

		(Dudley Fox) plink も試してみるといいでしょう。こっちの方が目
		的にあっていると思います。plink は putty スイートに含まれてい
		ます。

           http://the.earth.li/~sgtatham/putty/0.58/htmldoc/Chapter7.html#plink

		(Vissale Neang) OpenSSH の windows 版もあります。次の場所から
		入手可能:

		http://sshwindows.sourceforge.net/

		これは Cygwin をインストールしなくても使えます。

		(Antoine Mechelynck) Windows 環境でネイティブに動く Unix プロ
		グラムが個別に欲しい場合は sourceforge の GnuWin32 プロジェク
		トのものがいいと思います:

		    http://gnuwin32.sourceforge.net/

		Cygwin が Windows の上に Unix 仮想マシンを作っているのと違い、
		GnuWin32 は Windows のシステムコールで Unix のユーティリティを
		実装しています。なので、それらのプログラムは cmd.exe と相性が
		いいです。

		(dave) WinSCP を使ってサーバーに接続する方法もあります。
		Preferences > Editors で gvim をエディタとして設定する:

			- "Add..." をクリック
			- 外部エディタを設定 (パスは適当に調節してください。ク
			  オートを付けて最後に !.! を付ける):
			    "c:\Program Files\Vim\vim70\gvim.exe" !.!
			- 設定画面のの下の方を見てファイルタイプが
			  {asterisk}.{asterisk} (すべてのファイル)、または自分
			  の設定したい値になっているのを確認する (cec:
			  {asterisk} は * に読み替えてください。こういう風に書
			  かないとヘルプのタグとして認識されてしまうので...)。
			- 設定がリストボックスの一番上にくるようにする (なって
			  いない場合は設定をクリックして "Up" をクリックする)
		Norton Commander スタイルを使っている場合は <F4> を押すことで
		ファイルをローカルにコピーしたものをgvimで開くことができます。

		(Vit Gottwald) パブリックキーとプライベートキーを生成してパブ
		リックキーをサーバーに保存する方法: >
  http://www.chiark.greenend.org.uk/~sgtatham/putty/0.60/htmldoc/Chapter8.html#pubkey-gettingready
			(8.3 Getting ready for public key authentication)
<
		'pscp' でプライベートキーを使う方法: >

  http://www.chiark.greenend.org.uk/~sgtatham/putty/0.60/htmldoc/Chapter5.html
			(5.2.4 Using public key authentication with PSCP)
<
		(Ben Schmidt) cwRsync に付属している ssh が便利だと思います。
		私は最近これを見つけてほとんどの Windows システムに cwRsync か
		cwRsyncServer をインストールしました。ssh だけ使いたい場合は同
		じ人が配布している COPSSH を使った方がいいかもしれません。こっ
		ちには多分 sftp とかも入ってると思います。cwRsync には入ってな
		いのでよくわかりませんが。

		(cec) 以上の提案を実行する場合は以下の変数を .vimrc で設定する
		必要があるでしょう:

		|g:netrw_ssh_cmd| |g:netrw_list_cmd|  |g:netrw_mkdir_cmd|
		|g:netrw_rm_cmd|  |g:netrw_rmdir_cmd| |g:netrw_rmf_cmd|

		最初の変数 (|g:netrw_ssh_cmd|) が一番重要です。他の変数は
		g:netrw_ssh_cmd の文字列を使って初期値が設定されます。
						*netrw-p9* *netrw-ml_get*
	P9. ブラウザでディレクトリを変更するとなんか変になる。ml_get エラーが
	    表示されて、vim を kill するしかなくなる。どうすればいいの？

		Netrw ではディレクトリを表示しているバッファに対してスワップ
		ファイルが作成されないようにしていますが、その影響で、システム
		によっては ml_get エラーが発生することがあります。<.vimrc> で
		|g:netrw_use_noswf| を 0 に設定してみてください: >
			let g:netrw_use_noswf= 0
<
								*netrw-p10*
	P10. "[something] is a directory" と表示されて "Press ENTER or type
	     command to continue" というプロンプトが出るのがいやなんだけど...

		"[something] is a directory" プロンプトは (netrw ではなく) Vim
		によって出力されていて、この表示をなくす方法はありません。
		cmdheight が 1 (初期設定) の場合にこのメッセージによって
		"Press ENTER..." プロンプトが表示されます。|hit-enter| を読ん
		でください。|'cmdheight'| を 2 (かそれ以上) に設定するといいか
		もしれません。

								*netrw-p11*
	P11. ウィンドウを二分割して、左の細いウィンドウをブラウザ表示に、右の
	     ウィンドウをファイル編集用にしたいんだけど、どうすればいいの？

		* <.vimrc> に次の設定を書く:
			let g:netrw_altv = 1
		* カレントディレクトリを ":e ." で開く
		* ファイルを選択して v を押す
		* 適当にウィンドウのサイズを変更する (|CTRL-W_<| と |CTRL-W_>|
		  参照)。gvim を使っている場合はウィンドウの区切りをマウスでド
		  ラッグすることでもサイズを変更できる。
		* 他のファイルを開く場合は ctrl-w h で netrw ブラウザに戻り、
		  ファイルを選択し、P を押す (|CTRL-W_h| と |netrw-P| 参照)。
		  gvim を使っている場合はブラウザウィンドウで <leftmouse> 押し
		  てから開きたいファイルを <middlemouse> で選択する。

								*netrw-p12*
	P12. ディレクトリが正しくソートされない、一覧のファイル名になんか変な
	     文字が付く、wide 表示でファイルが正しく整列されない、...。

	     おそらくエンコーディングの問題です。私は普段 utf-8 を使っています
	     が、しかし ascii文字 (32-126の範囲のバイト) しか使っていません。
	     マルチバイトエンコーディングでは一つの文字を 2 バイトかそれ以上の
	     バイトで表現します。|g:netrw_sepchr| や |g:netrw_xstrlen| の設定
	     を変更してみてください。

								*netrw-p13*
	P13. Windows + putty + ssh を使っています。ブラウズするときにディレク
	     トリの末尾に "/" が付いていないため、netrw はそれをファイルとして
	     転送しようとするので、サブディレクトリをブラウズできません。なん
	     とかなりませんか？

	     (mikeyao) Windows 環境で vim を ssh と putty で使いたいなら、
	     plink と pscp/psftp の組み合わせを試してみてください。pscp/psftp
	     は接続に、plink はサーバー上でのコマンドの実行 (例えば 'ls' を
	     使ってファイルとディレクトリの一覧を取得) に使用されます。

	     私は次のように設定して使っています:
>
	    " ファイルの一覧取得用。一番大事な設定。これを設定しないと空のバッ
	    " ファが表示される
	    let g:netrw_list_cmd = "plink HOSTNAME ls -Fa"
	    " putty のディレクトリのシステムパスに追加していない場合は
	    " scp/sftp コマンドを指定する必要がある。例:
	    "let g:netrw_sftp_cmd = "d:\\dev\\putty\\PSFTP.exe"
	    "let g:netrw_scp_cmd = "d:\\dev\\putty\\PSCP.exe"
<


==============================================================================
11. Netrw をデバッグする				*netrw-debug* {{{1

<netrw.vim> スクリプトはたいていは次のような場所にあります:
>
	/usr/local/share/vim/vim6x/plugin/netrwPlugin.vim
	/usr/local/share/vim/vim6x/autoload/netrw.vim
< -or- >
	/usr/local/share/vim/vim7x/plugin/netrwPlugin.vim
	/usr/local/share/vim/vim7x/autoload/netrw.vim
<
スクリプトは起動時に自動的にロードされます (:set nocp を想定)。

	1. <Decho.vim> スクリプトを入手してください:

	     http://mysite.verizon.net/astronaut/vim/index.html#DECHO
	   or
	     http://vim.sourceforge.net/scripts/script.php?script_id=120

	  スクリプトは "vimball" になっています。7.0 かそれ以前の vim を使って
	  いる場合は vimball もアップデートする必要があります。
	     http://mysite.verizon.net/astronaut/vim/index.html#VIMBALL

	2. 次のようにして <netrw.vim> ファイルを編集してください: >

		vim netrw.vim
		:DechoOn
		:wq
<
	   通常のデバッグなし状態に戻すには再び <netrw.vim> を編集します >

		vim netrw.vim
		:DechoOff
		:wq
<
	   このコマンドは <Decho.vim> で定義されており、すべての Decho デバッ
	   グステートメント (Dfunc(), Dret(), Decho(), Dredir()) をコメントア
	   ウトします。

	3. Vim を起動して、ネットワークファイルを開いたりブラウジングしたりし
	   て問題を再現してください。<netrw.vim> がネットワーク上のファイルを
	   読み込んだり書き込んだりする過程が別のタブに出力されます。

	   出力をファイルに保存するには次のようにします >
		:tabnext
		:set bt=
		:w! DBG
<	   その情報を <netrw.vim> のメンテナに送ってください >
		NdrOchip at ScampbellPfamily.AbizM - NOSPAM
<
==============================================================================
12. 変更履歴						*netrw-history* {{{1

	v140: Jul 27, 2010 * (Lech Lorens) unexpected change of window
	v139: May 14, 2010 * when viewing remote directory listings and
			     changing listing style, going to tree listing
			     mode was issuing two rather useless messages
			     about the buffer name.  They have now been
			     silenced.
			   * (Jean Johner) with "behave mswin", clicking
			     on a filename in wide mode opened a new file
			     with a missing first letter
			   * (Britton Kerin) wanted netrw listings to be
			     buflisted; the |g:netrw_bufsettings| option
			     permits that.
	      Jun 18, 2010 * (Jan Steffens) added support for xz compression
	      Jun 23, 2010 * vimdiff dir1 dir2 now works
	      Jul 27, 2010 * (John Orr) pointed out that the intended maparg
			     test for gx was actually testing for g rather
			     than gx.  Fixed.
	v138: May 01, 2010 * added the bomb setting to the Save-Set-Restore
			     option handling (for Tony M)
	      May 14, 2010 * (Bram Moolenaar) netrw optionally sets cursorline
			     (and sometimes cursorcolumn) for its display.
			     This option setting was leaking through with
			     remote file handling.
	v137: Dec 28, 2009 * modified the preview window handling for
			     vertically split windows.  The preview
			     window will take up all but g:netrw_winsize
			     columns of the original window; those
			     g:netrw_winsize columns will be used for
			     the netrw listing.
			   * (Simon Dambe) removed "~" from
			     |g:netrw_glob_escape| under Windows
			   * (Bram Moolenaar) modified test for status bar
			     click with leftmouse.  Moved code to
			     s:NetrwLeftmouse().
	      Feb 24, 2010 * (for Jean Johner) added insert-mode maps; one
			     can get into insert mode with netrw via
			     ctrl-o :e .
	      Mar 15, 2010 * (Dominique Pellé) Directory with backslashes such
			     as foo\bar were not being entered/left properly
	      Mar 15, 2010 * Using :Explore .. and causing two FocusGained
			     events caused the directory to change.  Fixed.
	      Mar 22, 2010 * Last fix caused problems for *//pat and */filepat
			     searches.
	      Mar 30, 2010 * With :set hidden and changing listing styles 8
			     times, the tree listing buffer was being marked
			     as modified upon exit.  Fixed.
	v136: Jan 14, 2009 * extended |g:Netrw_funcref| to also handle lists
			     of function references
	      Jan 14, 2009 * (reported by Marvin Renich) with spell check
			     enabled, some filenamess will still being
			     displayed as spelling errors.
	      Apr 13, 2009 * (Björn Winckler) writing a file using
	                     remote scp caused syntax highlighting problem.
			     Solution: avoid syntax/syntax.vim's
			     au Filetype * syntax setting autocommand by
			     checking that the current buffer has the
			     netrw filetype before attempting a doau
			     in s:NetrwSafeOptions().
	      Apr 14, 2009 * (asgeo1) suggested the "T" map (|netrw-T|)
	      Apr 14, 2009 * marking wasn't working on executable and
			     other special filenames
	      Apr 20, 2009 * (Dennis Benzinger) files opened via http have
			     their syntax filetype auto-detected
	      Jun 19, 2009 * (Yukihiro Nakadaira) help document improvements
	      Jul 22, 2009 * g:netrw_browse_split will honor the
			     |'equalalways'| setting.
	      Jul 29, 2009 * implemented "I" mapping to toggle banner
			     (this is experimental and still being debugged)
	      Sep 19, 2009 * (Mike McEwan) writes via ftp now send both
			     g:netrw_ftpmode and g:netrw_ftpextracmd (if the
			     latter exists)
	      Dec 02, 2009 * netrw uses vimgrep several places; it now uses
			     "noautocmd vimgrep" (should be speedier).
	      Dec 03, 2009 * changed back to using -source instead of -dump
			     for elinks-using commands. (requested by James
			     Vega and Karsten Hopp)
	v135: Oct 29, 2008 * using |simplify()| on directory names
			     (supporting handling ".."s in directory names)
	      Oct 31, 2008 * added special file highlighting for core dumps
			     under Unix/Linux.  The default sorting sequence
			     now also gives core dumps priority.
	      Nov 10, 2008 * uses a call to netrw#Nread() instead of Nread
			     to avoid having to use fnameescape()
			   * fixed a tree redrawing problem (open directory,
			     open subdir, close subdir, close dir)
	      Nov 19, 2008 * sprinkled some histdel("/",-1)s through the code
			     in an attempt to prevent netrw from changing
			     the search history.
	      Jan 02, 2009 * |g:Netrw_funcref| included
	      Jan 05, 2009 * Explore */ **/ *// **// all clear explorer
			     variables
	      Jan 05, 2009 * (Panagiotis Louridas) extended s:WinPath()
			     to remove cygdrive from non-cygwin Windows
			     paths.  Improved the determination as to
			     whether or not to do so.
	      Jan 13, 2009 * included contains=@NoSpell in every syntax
			     group for syntax/netrw.vim .
	v134: Sep 30, 2008 * (Sander Marechal) provided a bugfix involving
			     the use of the |netrw-t| command with a remote
			     directory.
	      Sep 30, 2008 * using "x" on a remote jpg was failing; fixed.
	      Oct 03, 2008 * bookmarks now go on a list and are stored to
			     the first directory on the |'runtimepath'| in
			     the hopes of making their retention reliable.
			     History now also goes to that directory.
	      Oct 07, 2008 * Included check that vim 7.0 or later is in use.
	      Oct 07, 2008 * Improved |g:netrw_retmap| handling.
	      Oct 12, 2008 * Based upon Sébastien Migniot's suggestion, if
			     cadaver isn't available then netrw will try to
			     use curl for the dav://... protocol.
	      Oct 13, 2008 * added @*/ to netrw buffers' |'iskeyword'|setting
			     This lets mf (|netrw-mf|) mark directories, links
			     and executables.
	      Oct 13, 2008 * avoids a second NetrwBrowse() refresh when
			     g:netrw_fastbrowse is <= 1 (slow, medium speed)
	      Oct 22, 2008 * |g:netrw_http_xcmd| may now be overridden
			     independently of |g:netrw_http_cmd|.
	      Oct 23, 2008 * [N] added to the various Explore commands to
			     let users specify the width/height of new
			     explorer windows, overriding |g:netrw_winsize|.
	v133: Aug 10, 2008 * NetReadFixup() for win95 was missing some "a:"s
	      Aug 12, 2008 * (Jan Minář) an error condition in NetrwMethod()
			     wasn't being used, resulting in "b:netrw_fname
			     undefined" errors
	      Aug 12, 2008 * (François Ingeirest) asked that "hi link" be
			     changed to hi default link in the netrw syntax
			     files.
	      Aug 12, 2008 * using s:NetrwUnmarkList() more often.  Filenames
			     were being left on the global list when removed
			     from the buffer-local lists.
	      Aug 14, 2008 * (Joshua Clayton) an errant extra ")" was left in
			     the rcp-handling portion of NetRead().
	      Sep 03, 2008 * added |'cursorline'| highlighting to thin, long,
			     and tree displays.
	v132: Aug 06, 2008 * Fixed marked file-based obtain
	      Aug 08, 2008 * sourcing a file via ftp from a netrw-generated
	                     buffer (or any buffer with |'nobl'|) left an
			     empty no-name buffer in its wake.  Fixed.
	v130: Jul 31, 2008 * trying out elinks/links for http://host/
			     requests.  One problem: in-page links
			     (such as with ...#LABEL) are not supported
			   * verified that Bram's modified netrwPlugin works
	      Aug 01, 2008 * fixed a bug: when sourcing a file via ftp, the
			     "filter window" was left behind.
	v129: Jul 31, 2008 * bug found in non-mouse enabled vim and some
			     local maps
	v128: Jul 30, 2008 * much work done in using shellescape() and
			     fnameescape()
	v126: Jun 30, 2008 * after having gone to a remote directory,
	                     <f1> was no longer taking one to the correct
			     entry in the help (|netrw-quickhelp|).  Fixed.
	      Jul 01, 2008 * extracting the last filename from a wide listing
			     missed the last letter when |'virtualedit'| not
			     enabled.
	      Jul 01, 2008 * vim foo/bar  was creating [Scratch] buffers,
			     where bar was also a directory
	      Jul 01, 2008 * numerous additional changes were made to netrw
			     to use fnameescape() and shellescape() instead
			     of escape().  Not all changes have been tested
			     as yet...
	      Jul 01, 2008 * (James Vega reported) some problems with
			     :NetrwSettings (due to no longer used setting
			     variables).
	      Jul 07, 2008 * Additional numerous changes to support security;
	                     shellescape(arg,1), etc.
	v125: Apr 07, 2008 * (Cristian Rigamonti) CR provides a patch; he
			     noted that gx was failing since its call to
			     netrw#NetBrowseX() wasn't updated to
			     netrw#NetrwBrowseX().
			   * (Stanis Trendelenburg) ST provides a patch to
			     supports davs: (dav + ssl)
			   * (Rick Choi) noted that directory names comprised
			     of three digits were not being displayed by
			     the internal browser.  Fixed.
			   * (Erik Falor) provided a patch to handle problems
			     with changing directory and |'acd'| option.
			   * (James Vega, Teemu Likonen) noted that netrw
			     wasn't handling multi-byte filenames/directories
			     correctly.  Fixed.
			   * (Rick) found problem with g:netrw_maxfilenamelen
			     being overridden.
			   * (James Vega) pointed out that netrw was
			     misidentifying all files in a symbolically linked
			     directory as being symbolically linked
			     themselves.  This particular problem was fixed;
			     however, there are now situations where
			     symbolically linked files will not be detected.
			     Really need an internal vim function to do this
			     identification.
	      Apr 17, 2008 * When g:netrw_keepdir==0, current directory
	                     doesn't necessarily equal b:netrw_curdir
			     initially.  Problem is due to the patch directly
			     above.
			   * Fixed qf to handle case where b:netrw_curdir
			     isn't the same as the current directory under
			     linux/macosx.
			   * New: |netrw-mg| (apply vimgrep to marked files)
	      May 05, 2008 * (Rick) pointed out that a "setlocal ts=32" was
			     interfering with g:netrw_maxfilenamelen
	      May 05, 2008 * (James Vega) a file inside a linked directory
			     was showing up as a symbolic link itself.
	      May 22, 2008 * symbolic links, fifos, and sockets are now
	                     indicated by a trailing @, |, or =, respectively.
	      Jun 06, 2008 * Removed numerous bugs from the marked file
			     move and copy.  Tested these changes under
			     Unix only thus far.
			   * :Rexplore returns to the screen position in the
			     netrw listing from whence the file was edited
	v124: Apr 02, 2008 * (Adrian Rollett) change the line supporting the
			    "x" action for mac to use g:netrw_shq
	v123: Feb 27, 2008 * Marked files now keeps a "global" marked file
			     list.  The global marked file list is used to
			     support tag processing and vimdiff'ing
			     (|netrw-md| |netrw-mt|)
			   * Been insuring that mm and mc works with various
			     combinations of local and remote directories
			   * (Stefan Bittner) http://.../ should always have
			     filetype "html" -- fixed.
			   * (Stefan Bittner) a "?" in a http://.../ request
			     wasn't being handled correctly.  Fixed by
			     removing ? from default |g:netrw_tmpfile_escape|.
			   * (Nico Weber) % codes in http://.../ requests
			     weren't being handled correctly.  Fixed by
			     including % in default |g:netrw_fname_escape|.
			   * (Stefan Bittner) attempts to update Buffers.Refresh
			     were failing because locale use changed the menu
			     names.  I implemented a workaround.
	v122: Feb 12, 2008 * bugfix - first sorting sequence match now has
			     priority
	      Feb 14, 2008 * bugfix - sorting sequence was effectively ignoring
			     sequencing priority of anything following '*'
			   * toggling a marked file was showing incorrect list
			     (list was correct, but displayed matches weren't)
			   * |g:netrw_special_syntax| implemented
	v121: Feb 11, 2008 * Bram M reported that :e file ... :e . would not
			     retain the alternate file.  Fixed -- I hope!
			   * bugfix -- apparently v120 broke an explicit
			     :Explore dirname
	v120: Jan 21, 2008 * |netrw-mt| changed to allow for target selection
	                     based on whether or not word under cursor is a
			     directory or file, or if cursor is in banner
			     area.
			   * |netrw-mh| included (hiding by marked-file suffix)
			   * functions moved about a bit (improved
			     categorization)
			   * executable files now displayed with trailing (*)
			   * symbolically linked files now displayed with
			     trailing (@)
			   * Somewhen, s:NetrwMarkFileMove() got damaged.  It
			   * is now restored (missing an endif, for example).
			   * |netrw-mu| implemented (unmarking marked files)
			   * many bugs have been removed from the marked file
			     system (tnx to Mark S. for feedback)
			   * |netrw-ms| implemented (sourcing marked files)
			   * fixed use of P with tree listing style
			   * multiple tree listing now supported
			   * ./ suppressed
			   * changed q -> qb (query bookmarks)
			   * implemented |netrw-qf|
			   * Explore now has four special list-generation
			     modes: */filepat **/filepat
			           *//pattern **//pattern
			   * gh (|netrw-gh|) is a shortcut for toggling the
			     hiding of files and directories beginning with a
			     dot
	v119: Jan 10, 2008 * When g:netrw_keepdir is false,
			     NetrwOptionsRestore() had a problem
			     (Bill McCarthy)
	      Jan 11, 2008 * Netrw now shows symbolic links with a trailing
	                     "@" and special highlighting.
	      Jan 15, 2008 * Changed g:netrw_noretmap -> |g:netrw_retmap|.
	                     Changed: disabled by default at Bram's
			     preference.
	v118: Jan 02, 2008 * Fixed a problem with Windows;
			     :Explore c:/path/ would not work,
			     but :Explore c:/path would.
			   * Fixed a bug in s:NetrwOptionRestore() - lcd's
			     argument wasn't being properly escaped so it
			     wouldn't handle spaces in directory names.
			     (Gary Johnson)
	v117: Jan 02, 2008 * Fixed a problem with P; had to include
			     a b:netrw_curdir bypass (Bram Moolenaar)
	v116: Nov 27, 2007 * netrw#LocalBrowseCheck() has &ft=="netrw"
			     check to prevent doing a directory listing
			     (was getting unexpected directory refreshes
			     in the middle of some function calls)
			   * NetrwOptionRestore moved after e! filename
			     in order to retain user options for editing
			     in s:NetrwBrowseChgDir()
	      Dec 12, 2007 * Bug fix -- netrw does a better job of retaining
	                     user options when editing files under the aegis
			     of the browser
	v115: Oct 04, 2007 * Erik Remmelzwaal pointed out that the use of
			     shellslash in s:GetTempfile() was incorrect
	      Oct 11, 2007 * Tracked down and eliminated a bug with editing
			     remote *.tar.gz and *.tar.bz2 files
	      Oct 11, 2007 * g:netrw_localmovecmd wasn't being initialized
			     properly, and g:netrw_localcopycmd was being
			     overwritten.
	      Oct 12, 2007 * Placed all :Rexplore and <2-leftmouse> setup
			     in a new support function (s:SetRexDir()).
	      Oct 15, 2007 * new: g:netrw_browse_split == 4; means <cr>
			     based selection will use previous window
	      Oct 20, 2007 * also checks on |'shellxquote'| to set g:netrw_shq
	      Oct 24, 2007 * Explore handles path/**/filename
	      Oct 27, 2007 * sourcing remote files often didn't work with ftp,
	                     turns out that b:netrw_method was undefined, so
			     s:SaveBufVars and s:RestoreBufVars() fixed it.
	v114: Sep 28, 2007 * mT, the map that invokes tags, has been improved
			     to support use of remote tags files.
	      Oct 02, 2007 * changed Netrw menu to use more submenus
	v113: Sep 07, 2007 * worked out why the cursor position wasn't being
			     saved and restored as intended after doing such
			     things as deleting and renaming files.
	      Sep 11, 2007 * Fixed bug which effectively disabled <c-l> and
			     <c-h> maps
	      Sep 18, 2007 * there used to be one NetrwOptionRestore() call at
			     the end of the s:NetrwBrowseChgDir() function;
			     they're now at the end of every if..elseif..else
			     block.  The edit-a-file one is not quite at the end
			     of its block; instead, it's just before the edit.
			     Restores user options, then this new placement
			     allows ftplugins, autocmds, etc to change settings
			     (ex. ftplugin/cpp.vim sets cindent).
	      Sep 19, 2007 * changed all strlen() calls to use s:Strlen(), a
			     function which handles utf-8 wide characters
			     correctly.
	      Sep 20, 2007 * (Nico Weber) the "x" command has been extended
			     to Mac's OS/X (macunix); it now uses open to
			     handle |netrw-x| browsing with special files.
	      Sep 22, 2007 * Added g:netrw_noretmap to netrw at Tony M's
			     request.
			   * Included path to NetrwRemoteRmFile()
	v112: Aug 18, 2007 * added mx (|netrw-mx|) for executing arbitrary
			     commands on marked files
	      Aug 22, 2007 * more option save/restore work for
			     s:NetrwBrowseChgDir(); s:NetrwOptionSave()
			     and s:NetrwOptionRestore() now take a parameter
			     specifying the type of variables to be used for
			     saving and restoring (either "w:" or "s:")
	      Sep 04, 2007 * added the :NetrwClean[!] command
	v111: Jul 25, 2007 * using Windows but not using Cygwin, netrw does a
			     "file bufname" where the bufname uses /s
			     instead of \s; Vim "fixes" it by changing the
			     bufname to use \s anyway.  This meant that
			     NetrwGetBuffer() didn't find the appropriately
			     named buffer, and so would generate a new
			     buffer listing; hence the cursor would appear
			     to have been moved when doing a preview.
			   * added <2-leftmouse> map to return to netrw's
			     browser display
	      Aug 16, 2007 * added the mark-file system, including
			     maps for mf mp mt mz and mu.  Modifications
			     made to maps for a D O and R to support
			     marked files.
	v110: May 10, 2007 * added [ and ] maps to NetrwTreeListing
	      May 25, 2007 * |g:netrw_preview| included
	      May 29, 2007 * modified netrw#NetBrowseX to consistently use
			     g:netrw_shq instead of hardcoded quotes,
			     and modified the snippet that sets up redir
			     so Windows machines use "nul" instead of
			     "/dev/null".
	      Jun 01, 2007 * fixed bug -- NetGetBuffer() wasn't always
			     recognizing a buffer name match when it should,
			     thus resulting in [Scratch] buffers.
	      Jun 04, 2007 * Gary Johnson found a bugfix for the "c" mapping
			     when the directory is to be made current but
			     the name contains spaces.
	v109: Mar 26, 2007 * if a directory name includes a "$" character,
			     Explore() will use expand() in an attempt to
			     decipher the name.
	      May 07, 2007 * g:netrw_use_errorwindow now allows one to
			     have error messages go to a reliable window
			     or to use a less reliable but recallable
			     echoerr method
	      May 07, 2007 * g:netrw_scpport and g:netrw_sshport support
			     use of -P and -p, respectively, to set port
			     for scp/ssh.
	v108: Jan 03, 2007 * included preview map (|netrw-p|), supporting
			     remote browsing
			   * netrw can now source remote files
	      Jan 26, 2007 * Colton Jamieson noted that remote directory
			     browsing did not support alternate port
			     selection.  This feature has now been extended
			     to apply to all remote browsing commands via ssh.
			     (list, remove/delete, rename)
	      Jan 31, 2007 * Luis Florit reported that @* was an invalid
			     register.  The @* register is now only saved and
			     restored if |'guioptions'| contains "a".
	      Feb 02, 2007 * Fixed a bug that cropped up when writing files
			     via scp using cygwin
	      Feb 08, 2007 * tree listing mode managed to stop working again;
			     fixed again!
	      Feb 15, 2007 * Guido Van Hoecke reported that netrw didn't
			     handle browsing well with M$ ftp servers.  He even
			     set up a temporary account for me to test with
			     (thanks!).  Netrw now can browse M$ ftp servers.
	v107: Oct 12, 2006 * bypassed the autowrite option
	      Oct 24, 2006 * handles automatic decompression of *.gz and *.bz2
			     files
	      Nov 03, 2006 * Explore will highlight matching files when
			     **/pattern is used (and if the |'hls'| option
			     is set)
	      Nov 09, 2006 * a debugging line, when enabled, was inadvertently
			     bringing up help instead of simply reporting on
			     list contents
	      Nov 21, 2006 * tree listing improved (cursor remains put)
	      Nov 27, 2006 * fixed b:netrw_curdir bug when repeated "i"s were
			     pressed.
	      Dec 15, 2006 * considerable qty of changes, mostly to share more
			     code between local and remote browsing.  Includes
			     support for tree-style listing for both remote
			     and local browsing.
	      Dec 15, 2006 * Included Peter Bengtsson's modifications to
			     support the Amiga.
	v106: Sep 21, 2006 * removed old v:version<700 code as netrw now
			     requires vim 7.0
			   * worked around a bug where register * was
			     overwritten during local browsing
	v104: Sep 05, 2006 * as suggested by Rodolfo Borges, :Explore and
			     variants will position the cursor on the file
			     just having been edited
			   * changed default |g:netrw_sort_sequence| order
			   * changed b, Nb to simply mb  (see |netrw-mb|)
			   * changed B, NB to simply gb  (see |netrw-gb|)
			   * tree listing style (see |g:netrw_liststyle|)
			   * attempts to retain the alternate file
	v103: Jul 26, 2006 * used Yakov Lerner's tip#1289 to improve netrw
			     error message display
			   * wide listings didn't handle files with backslashes
			     in their names properly.  A symptom was an
			     inability to open files.
	      Aug 09, 2006 * included "t" mapping for opening tabbed windows,
			    both for remote and local browsing
			   * changed netrw_longlist to netrw_liststyle
	      Aug 15, 2006 * fixed one of the NB maps
	      Aug 22, 2006 * changed *Explore commands to use -nargs=* instead
			     of -nargs=?.  Allows both -complete=dir _and_ the
			     starstar arguments to work (-nargs=? seems to
			     require one or the other).
	      Aug 23, 2006 * copied all w:.. variables across splits to
			     new windows
	      Aug 25, 2006 * when g:netrw_browsex_viewer was '-'
			     (see |g:netrw_browsex_viewer|) it wasn't causing
			     netrwFileHandlers#Invoke() to be called as it
			     was expected to.  (tnx Steve Dugaro)
	      Aug 29, 2006 * changed NetBrowseX() to use "setlocal ... noswf"
			     instead of "set ... noswf"  (tnx Benji Fisher)
	      Aug 31, 2006 * tabs and fastbrowse<=1 didn't work together.
	v102: Jun 15, 2006 * chgd netrwPlugin to call netrw#LocalBrowseCheck()
			   * bugfix: g:netrw_keepdir==0 had stopped working
	      Jul 06, 2006 * bugfix: NetOptionSave/Restore now saves/restores
			     the unnamed register (|registers|)
	      Jul 07, 2006 * |g:netrw_menu| support included
	      Jul 13, 2006 * :Texplore command implemented
	      Jul 17, 2006 * NetSplit and (Local|Net)BrowseChgDir() were both
			     splitting windows.  This affected o, v, and
			     g:netrw_browse_split.
	      Jul 20, 2006 * works around wildignore setting (was causing
			     netrw's local browser not to list wildignore'd
			     files)
	      Jul 24, 2006 * <leftmouse> acts as a <cr> for selecting a file
			     <rightmouse> acts as a <del> for deleting a file
	v100: May 14, 2006 * when using Windows and shell==cmd.exe, the
			     default for g:netrw_ignorenetrc is now 1
			   * bugfix: unwanted ^Ms now removed
			     (affected shell==cmd.exe - Windows)
			   * added Bookmarks and History to the menu
			   * an error message about non-existing
			     w:netrw_longlist was appearing during attempts to
			     Explore (fixed)
			   * g:netrw_shq now available to make netrw use
			     specified style of quotes for commands
	     May 29, 2006  * user NFH_*() functions were inadvertently being
			     ignored
			   * fixed a Windows non-cygwin ftp handling problem.
			   * hiding pattern candidate separators included some
			     characters it shouldn't have (tnx to Osei Poku)
	     Jun 01, 2006  * for browsing, netrw was supposed to use "dir"
			     instead of "ls -lF" when using
			     ftp+non-cygwin+windows.  Fixed.
			   * an inadvertently left-in-place debugging statement
			     was preventing use of the "x" key with browsing.
	     Jun 05, 2006  * g:netrw_nogx available to prevent making the gx
			     map (see |g:netrw_nogx|)
			   * bugfix, Explore wouldn't change directory
			     properly (vim ., :Explore subdirname)
	     Jun 06, 2006  * moved history to 2nd line in Netrw menu
			   * fixed delete for unix-based systems
	     Jun 07, 2006  * x key now works for windows-noncygwin-ftp
	     Jun 08, 2006  * Explore */pat and **//pat now wraps
	v99: May 09, 2006  * g:netrw_browse_split=3 for opening files in new
			     tabs implemented.
	     May 12, 2006  * deletes temporary file at end of NetRead()
			   * visual mode based Obtain implemented
			   * added -complete=dir to the various Explore
			     commands
	v98: May 02, 2006  * the "p" key didn't work properly when the browsing
			     directory name had spaces in it.
	v97: May 01, 2006  * exists("&acd") now used to determine if
			     the 'acd' option exists
			   * "obtain" now works again under Windows
	v96:		   * bugfix - the |'acd'| option is not always defined
			     but is now bypassed only when it is
	v95:		   * bugfix - Hiding mode worked correctly (don't show
			     any file matching any of the g:netrw_hide
			     patterns), but showing mode was showing only those
			     files that didn't match any of the g:netrw_hide
			     patterns.  Instead, it now shows all files that
			     match any of the g:netrw_hide patterns (the
			     difference between a logical and and logical or).
	v94:		   * bugfix - a Decho() had a missing quote; only
			     affects things when debugging was enabled.
	v93:		   * bugfix - removed FocusGained event from causing a
			     slow-browser refresh for Windows
	v92:		   * :Explore **//pattern implemented
			      (**/filepattern was already taken)
	v91:		   * :Explore */pattern implemented
			   * |'acd'| option bypassed
	v90:		   * mark ', as suggested by Yegappan Lakshmanan, used
			     to help guarantee entry into the jump list when
			     appropriate.
			   * <s-down> and <s-up> are no longer defined until a
			     :Explore **/pattern  is used (if the user already
			     has a map for them).  They will be defined for new
			     browser windows from that point forward.
	v89:		   * A <s-down>, <s-up>, :Nexplore, or a :Pexplore
			     without having first done an :Explore **/pattern
			     (see |netrw-starstar|) caused
			     a lot of unhelpful error messages to appear
	v88:		   * moved DrChip.Netrw menu to Netrw.  Now has
			     priority 80 by default.
			     g:NetrwTopLvlMenu == "Netrw" and can be changed
			     by the user to suit.  The priority is given by
			     g:NetrwMenuPriority.
			   * Changed filetype for browser displays from
			     netrwlist to netrw.
	v87:		   * bug fix -- menus were partially disappearing
	v85:		   * bug fix -- missing an endif
			   * bug fix -- handles spaces in names and directories
			     when using ftp-based browsing
	v83:		   * disabled stop-acd handling; the change in directory
			     handling may allow acd to be used again.
			   * D was refusing to delete remote files/directories
			     in wide listing mode.
	v81:		   * FocusGained also used to refresh/wipe local browser
			     directory buffers
			   * (bugfix) netrw was leaving [Scratch] buffers behind
			     when the user had the "hidden" option set.  The
			     'hidden' option is now bypassed.
	v80:		   * ShellCmdPost event used in conjunction with
			     g:netrw_fastbrowse to refresh/wipe local browser
			     directory buffers.
	v79:		   * directories are now displayed with nowrap
			   * (bugfix) if the column width was smaller than the
			     largest file's name, then netrw would hang when
			     using wide-listing mode - fixed
			   * g:netrw_fastbrowse introduced
	v78:		   * progress has been made on allowing spaces inside
			     directory names for remote work (reading, writing,
			     browsing).  (scp)
	v77:		   * Mikolaj Machowski fixed a bug in a substitute cmd
			   * g:netrw_browsex_viewer implemented
			   * Mikolaj Machowski pointed out that gnome-open is
			     often executable under KDE systems, although it is
			     effectively not functional.  NetBrowseX now looks
			     for "kicker" as a running process to determine if
			     KDE is actually running.
			   * Explorer's O functionality was inadvertently left
			     out.  Netrw now does the same thing, but with the
			     "P" key.
			   * added g:netrw_browse_split option
			   * fixed a bug where the directory contained a "." but
			     the file didn't (was treating the dirname from "."
			     onwards as a suffix)
	v76:		   * "directory is missing" error message now restores
			      echo highlighting
	v75:		   * file://... now conforms to RFC2396 (thanks to
			     S. Zacchiroli)
			   * if the binary option is set, then NetWrite() will
			     only write the whole file (line numbers don't make
			     sense with this).  Supports writing of tar and zip
			     files.
	v74:		   * bugfix (vim, then :Explore) now works
			   * ctrl-L keeps cursor at same screen location (both
			     local and remote browsing)
			   * netrw now can read remote zip and tar files
			   * Obtain now uses WinXP ftp+.netrc successfully
	v73:		   * bugfix -- scp://host/path/file was getting named
			     incorrectly
			   * netrw detects use of earlier-than-7.0 version of
			     vim and issues a pertinent error message.
			   * netrwSettings.vim is now uses autoloading.  Only
			     <netrwPlugin.vim> is needed as a pure plugin
			     (ie. always loaded).
	v72:		   * bugfix -- formerly, one could prevent the loading
			     of netrw by "let g:loaded_netrw=1"; when
			     autoloading became supported, this feature was
			     lost.  It is now restored.
	v71:		   * bugfix -- made some "set nomodifiable"s into
			     setlocal variants (allows :e somenewfile  to be
			     modifiable as usual)
			   * NetrwSettings calls a netrw function, thereby
			     assuring that netrw has loaded.  However, if netrw
			     does not load for whatever reason, then
			     NetrwSettings will now issue a warning message.
			   * For what reason I don't recall, when wget and fetch
			     are both not present, and an attempt to read a
			     http://... url is made, netrw exited.  It now only
			     returns.
			   * When ch=1, on the second and subsequent uses of
			     browsing Netrw would issue a blank line to clear
			     the echo'd messages.  This caused an annoying
			     "Hit-Enter" prompt; now a blank line message
			     is echo'd only if &ch>1.
	v70:		   * when using |netrw-O|, the "Obtaining filename"
			     message is now shown using |hl-User9|.  If User9
			     has not been defined, netrw itself will define it.
	v69:		   * Bugfix: win95/98 machines were experiencing a
			     "E121: Undefined variable: g:netrw_win95ftp"
			     message
	v68:		   * double-click-leftmouse selects word under mouse
	v67:		   * Passwords which contain blanks will now be
			     surrounded by double-quotes automatically (Yongwei)
	v66:		   * Netrw now seems to work with a few more Windows
			     situations
			   * O now obtains a file: remote browsing
			     file -> local copy, locally browsing
			     file -> current directory (see :pwd)
			   * i now cycles between thin, long, and wide listing
			     styles
			   * NB and Nb are maps that are always available;
			     corresponding B and b maps are only available when
			     not using wide listing in order to allow them to
			     be used for motions
	v65:		   * Browser functions now use NetOptionSave/Restore; in
			     particular, netrw now works around the report
			     setting
	v64:		   * Bugfix - browsing a "/" directory (Unix) yielded
			     buffers named "[Scratch]" instead of "/"
			   * Bugfix - remote browsing with ftp was omitting
			     the ./ and ../
	v63:		   * netrw now takes advantage of autoload (needs 7.0)
			   * Bugfix - using r (to reverse sort) working again
	v62:		   * Bugfix - spaces allowed again in directory names
			     with g:netrw_keepdir=0.  In fact, I've tested netrw
			     with most ANSI punctuation marks for directory
			     names.
			   * Bugfix - NetrwSettings gave errors when
			     g:netrw_silent had not be set.
	v61:		   * Document upgrade -- netrw variable-based settings
			     all should have tags.  Supports NetrwSettings cmd.
			   * Several important variables are window-oriented.
			     Netrw has to transfer these across a window split.
			     See s:BufWinVars() and s:UseBufWinVars().
	v60:		   * When using the i map to switch between long and
			     short listings, netrw will now keep cursor on same
			     line
			   * "Match # of #" now uses status line
			   * :Explore **/*.c  will now work from a
			     non-netrw-browser window
			   * :Explore **/patterns can now be run in separate
			     browser windows
			   * active banner (hit <cr> will cause various things
			     to happen)
	v59:		   * bugfix -- another keepalt work-around installed
			     (for vim6.3)
			   * "Match # of #" for Explore **/pattern matches
	v58:		   * Explore and relatives can now handle
			     **/somefilepattern (v7)
			   * Nexplore and Pexplore introduced (v7).  shift-down
			     and shift-up cursor keys will invoke Nexplore and
			     Pexplore, respectively.
			   * bug fixed with o and v
			   * autochdir only worked around for vim when it has
			     been compiled with either
			     |+netbeans_intg| or |+sun_workshop|
			   * Under Windows, all directories and files were
			     being preceded with a "/" when local browsing.
			     Fixed.
			   * When: syntax highlighting is off, laststatus=2, and
			     remote browsing is used, sometimes the laststatus
			     highlighting bleeds into the entire display.  Work
			     around - do an extra redraw in that case.
			   * Bugfix: when g:netrw_keepdir=0, due to re-use of
			     buffers, netrw didn't change the directory when it
			     should've
			   * Bugfix: D and R commands work again
	v57:		   * Explore and relatives can now handle RO files
			   * reverse sort restored with vim7's sort command
			   * g:netrw_keepdir now being used to keep the current
			     directory unchanged as intended (sense change)
			   * vim 6.3 still supported
	v56:		   * LocalBrowse now saves autochdir setting, unsets it,
			     and restores it before returning.
			   * using vim's rename() instead of system +
			     local_rename variable
			   * avoids changing directory when g:netrw_keepdir is
			     false
	v55:		   * -bar used with :Explore :Sexplore etc to allow
			     multiple commands to be separated by |s
			   * browser listings now use the "nowrap" option
			   * browser: some unuseful error messages now
			     suppressed
	v54:		   * For backwards compatibility, Explore and Sexplore
			     have been implemented.  In addition, Hexplore and
			     Vexplore commands are available, too.
			   * <amatch> used instead of <afile> in the
			     transparency support (BufReadCmd, FileReadCmd,
			     FileWriteCmd)
			   * ***netrw*** prepended to various error messages
			     netrw may emit
			   * g:netrw_port used instead of b:netrw_port for scp
			   * any leading [:#] is removed from port numbers
	v53:		   * backslashes as well as slashes placed in various
			     patterns (ex. g:netrw_sort_sequence) to better
			     support Windows
	v52:		   * nonumber'ing now set for browsing buffers
			   * when the hiding list hid all files, error messages
			     ensued. Fixed
			   * when browsing, swf is set, but directory is not
			     set, when netrw was attempting to restore options,
			     vim wanted to save a swapfile to a local directory
			     using an url-style path.  Fixed
	v51:		   * cygwin detection now automated
			     (using windows and &shell is bash)
			   * customizable browser "file" rejection patterns
			   * directory history
			   * :[range]w url  now supported (ie. netrw uses a
			     FileWriteCmd event)
			   * error messages have a "Press <cr> to continue" to
			     allow them to be seen
			   * directory browser displays no longer bother the
			     swapfile
			   * u/U commands to go up and down the history stack
			   * history stack may be saved with viminfo with it's
			     "!" option
			   * bugfixes associated with unwanted [No Files]
			     entries
	v50:		   * directories now displayed using buftype=nofile;
			     should keep the directory names as-is
			   * attempts to remove empty "[No File]" buffers
			     leftover from :file ..name.. commands
			   * bugfix: a "caps-lock" editing difficulty left in
			     v49 was fixed
			   * syntax highlighting for "Showing:" the hiding list
			     included
			   * bookmarks can now be retained if "!" is in the
			     viminfo option
	v49:		   * will use ftp for http://.../ browsing
	v48:		   * One may use ftp to do remote host file browsing
			   * (windows and !cygwin) remote browsing with ftp can
			     now use the "dir" command internally to provide
			     listings
			   * g:netrw_keepdir now allows one to keep the initial
			     current directory as the current directory
			     (normally the local file browser makes the
			     currently viewed directory the current directory)
			   * g:netrw_alto and g:netrw_altv now support
			     alternate placement of windows started with o or v
			   * Nread ? and Nwrite ?  now uses echomsg (instead of
			     echo) so :messages can repeat showing the help
			   * bugfix: avoids problems with partial matches of
			     directory names to prior buffers with longer names
			   * one can suppress error messages with g:netrw_quiet
			     ctrl-h used
			   * instead of <Leader>h for editing hiding list one
			     may edit the sorting sequence with the S map, which
			     now allows confirmation of deletion with
			     [y(es) n(o) a(ll) q(uit)]
			   * the "x" map now handles special file viewing with:
			     (windows) rundll32 url.dll (gnome) gnome-open (kde)
			     kfmclient If none of these are on the executable
			     path, then netrwFileHandlers.vim is used.
			   * directory bookmarking during both local and remote
			     browsing implemented
			   * one may view all, use the hiding list to suppress,
			     or use the hiding list to show-only remote and
			     local file/directory listings
			   * improved unusual file and directory name handling
			     preview window support
	v47:		   * now handles local browsing.
	v46:		   * now handles remote browsing
			   * g:netrw_silent (if 1) will cause all transfers to
			     be silent
	v45:		   * made the [user@]hostname:path form a bit more
			     restrictive to better handle errors in using
			     protocols (e.g. scp:usr@host:file was being
			     recognized as an rcp request)
	v44:		   * changed from "rsync -a" to just "rsync"
			   * somehow an editing error messed up the test to
			     recognize use of the fetch method for NetRead.
			   * more debugging statements included
	v43:		   * moved "Explanation" comments to <pi_netrw.txt> help
			     file as "Network Reference" (|netrw-ref|)
			   * <netrw.vim> now uses Dfunc() Decho() and Dret() for
			     debugging
			   * removed superfluous NetRestorePosn() calls
	v42:		   * now does BufReadPre and BufReadPost events on
			     file:///* and file://localhost/*
	v41:		   * installed file:///* and file://localhost/* handling
	v40:		   * prevents redraw when a protocol error occurs so
			     that the user may see it
	v39:		   * sftp support
	v38:		   * Now uses NetRestorePosn() calls with Nread/Nwrite
			     commands
			   * Temporary files now removed via bwipe! instead of
			     bwipe (thanks to Dave Roberts)
	v37:		   * Claar's modifications which test if ftp is
			     successful, otherwise give an error message
			   * After a read, the alternate file was pointing to
			     the temp file.  The temp file buffer is now wiped
			     out.
			   * removed silent from transfer methods so user can
			     see what's happening


==============================================================================
13. Todo						*netrw-todo* {{{1

07/29/09 : banner	:|g:netrw_banner| can be used to suppress the
	   suppression	  banner.  This feature is new and experimental,
			  so its in the process of being debugged.
09/04/09 : "gp"		: See if it can be made to work for remote systems.
			: See if it can be made to work with marked files.

==============================================================================
14. クレジット						*netrw-credits* {{{1

	Vim editor	by Bram Moolenaar (Thanks, Bram!)
	dav		support by C Campbell
	fetch		support by Bram Moolenaar and C Campbell
	ftp		support by C Campbell <NdrOchip@ScampbellPfamily.AbizM>
	http		support by Bram Moolenaar <bram@moolenaar.net>
	rcp
	rsync		support by C Campbell (suggested by Erik Warendorph)
	scp		support by raf <raf@comdyn.com.au>
	sftp		support by C Campbell

	inputsecret(), BufReadCmd, BufWriteCmd contributed by C Campbell

	Jérôme Augé		-- also using new buffer method with ftp+.netrc
	Bram Moolenaar		-- obviously vim itself, :e and v:cmdarg use,
	                           fetch,...
	Yasuhiro Matsumoto	-- pointing out undo+0r problem and a solution
	Erik Warendorph		-- for several suggestions (g:netrw_..._cmd
				   variables, rsync etc)
	Doug Claar		-- modifications to test for success with ftp
	                           operation

==============================================================================
Modelines: {{{1
 vim:tw=78:ts=8:ft=help:norl:fdm=marker
