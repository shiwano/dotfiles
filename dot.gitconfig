[user]
  name = Shogo Iwano
  email = shiwano@gmail.com
[github]
  user = shiwano
  token = !security 2>&1 >/dev/null find-generic-password -gs \"GitHub API Token\" | ruby -e 'print $1 if STDIN.gets =~ /^password: \\\"(.*)\\\"$/'
[core]
  excludesfile = ~/.gitignore
  autocrlf = input
[color]
  ui = auto
[alias]
  gommit = commit
  co = checkout
  ci = commit
  cim = commit -m
  cia = commit --amend -C HEAD
  aa = add -A
  au = add -u
  s = status
  st = status
  up = pull --rebase
  diff = diff --color
  di = diff --color
  dica = diff --color --cached
  dist = diff --color --staged
  diw = diff --color --word-diff
  di-csv = diff --color --word-diff-regex="[^[:blank:],]"
  dist-csv = diff --staged --color --word-diff-regex="[^[:blank:],]"
  mt = mergetool
  topic = checkout origin/master -b
  current-branch = describe --all --contains HEAD
  la = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  lg = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  ls = log --stat --summary --color
  log-stat = log --stat --summary --color
  lp = log --patch --color
  log-patch = log --patch --color
  ignore = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged
  ignored = !git ls-files -v | grep "^[a-z]"
  unstage = reset HEAD
  us = reset HEAD
  contributors = git shortlog -s -n -e
  rename-branch = branch -m
  cch= "!f() { git cherry -v "$@" | awk '{ if($1 == \"+\"){ color = \"green\" } if($1 == \"-\"){ color = \"red\" } cmd = \"git show --date=short --no-notes --pretty=format:\\047%C\" color $1 \" %h %Cgreen%cd %Cblue%cn%x09%Creset%s\\047 --summary \" $2; cmd | getline t; close(cmd); print t }' ;}; f"
  up-upstream = "!sh -c ' \
                 branch=${2:-`git current-branch`}; \
                 git checkout master; \
                 git fetch upstream; \
                 git merge upstream/master; \
                 git push origin master; \
                 git checkout ${branch}; \
               ' __dummy__"
  prune-branches = !git branch --delete $(git branch --merged master | grep -v '^*\\|  master$')
  prune-remote-branches = "!sh -c ' \
                           git branch -r --merged | \
                           grep origin | \
                           grep -v \">\" | \
                           grep -v master | \
                           sed \"/>|master/d;/origin/!d;s:origin/::\" | \
                           xargs git push origin --delete \
                         ' __dummy__"

  # for gerrit
  config-for-aiming = config user.email siwano@aiming-inc.com
  push-for-review = !git push origin HEAD:refs/for/master/$(git current-branch)
  pfr = "!sh -c ' \
        reviewer=$1; \
        topic=${2:-`git current-branch`}; \
        if [ -n \"$reviewer\" ]; then \
          git push origin HEAD:refs/for/master/${topic} --receive-pack=\"git receive-pack --reviewer=$reviewer\" ;\
        else \
          git push origin HEAD:refs/for/master/${topic} ;\
        fi; \
      ' __dummy__"
  fetch-for-review = "!sh -c 'git fetch origin $0 && git checkout FETCH_HEAD'"
  ffr = "!sh -c ' \
        change=$1; \
        if [ -z \"$change\" ]; then exit 1; fi; \
        patchset=${2:-1}; \
        val=`expr $change % 100`; \
        dir=`printf '%02d' $val` ; \
        git fetch origin refs/changes/$dir/$change/$patchset && git checkout FETCH_HEAD -b $change-$patchset; \
      ' __dummy__"
[merge]
  tool = vimdiff
[mergetool]
  keepBackup = false
[http]
  postBuffer = 524288000
[push]
  default = nothing
