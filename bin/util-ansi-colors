#!/usr/bin/env bash

set -euo pipefail

usage() {
	local fd="${1:-2}"
	cat <<EOF >&$fd
Usage: util-ansi-colors

Display ANSI color code demonstrations:

- Base foreground colors (30–37, 90–97)
- Base background colors (40–47, 100–107)
- Extended 256-color mode
- 24-bit RGB background gradients
- Notes on ANSI escape codes

Examples:
  util-ansi-colors
EOF
}

topic() {
	printf "\033[1;34m%s\033[0m\n" "$*"
}

show_basic_colors() {
	topic "Base foreground colors"

	fg_codes=(30 31 32 33 34 35 36 37 90 91 92 93 94 95 96 97)
	fg_names=("black" "red" "green" "yellow" "blue" "magenta" "cyan" "white"
		"bright_black" "bright_red" "bright_green" "bright_yellow"
		"bright_blue" "bright_magenta" "bright_cyan" "bright_white")

	for i in "${!fg_codes[@]}"; do
		code="${fg_codes[$i]}"
		name="${fg_names[$i]}"
		printf "\\\\033[%sm → \033[%sm %3s (%-13s) \033[0m\n" "$code" "$code" "$code" "$name"
	done

	topic "Base background colors"

	bg_codes=(40 41 42 43 44 45 46 47 100 101 102 103 104 105 106 107)
	bg_names=("black" "red" "green" "yellow" "blue" "magenta" "cyan" "white"
		"bright_black" "bright_red" "bright_green" "bright_yellow"
		"bright_blue" "bright_magenta" "bright_cyan" "bright_white")

	for i in "${!bg_codes[@]}"; do
		code="${bg_codes[$i]}"
		name="${bg_names[$i]}"
		if [[ $name == *black* ]]; then
			printf "\\\\033[%sm → \033[%sm\033[37m %3s (%-14s) \033[0m\n" "$code" "$code" "$code" "$name"
		else
			printf "\\\\033[%sm → \033[%sm\033[30m %3s (%-14s) \033[0m\n" "$code" "$code" "$code" "$name"
		fi
	done

	topic "Reset"
	printf "\\\\033[0m → \033[0m RESET \033[0m\n"
}

show_256_colors() {
	topic "Extended foreground colors (256 colors)"
	for code in {0..255}; do
		printf "\\\\033[38;5;%sm \033[38;5;%sm%3s\033[0m " "$code" "$code" "$code"
		if (((code + 1) % 8 == 0)); then
			echo ""
		fi
	done
}

show_24bit_gradient() {
	topic "24-bit RGB background gradient"

	set_bg() {
		local r="${1:-0}"
		local g="${2:-0}"
		local b="${3:-0}"
		printf "\x1b[48;2;%s;%s;%sm" "$r" "$g" "$b"
	}

	reset_output() {
		printf "\x1b[0m\n"
	}

	rainbow_color() {
		local h=$(($1 / 43))
		local f=$(($1 - 43 * h))
		local t=$((f * 255 / 43))
		local q=$((255 - t))

		case $h in
		0) echo "255 $t 0" ;;
		1) echo "$q 255 0" ;;
		2) echo "0 255 $t" ;;
		3) echo "0 $q 255" ;;
		4) echo "$t 0 255" ;;
		5) echo "255 0 $q" ;;
		*) echo "0 0 0" ;;
		esac
	}

	for i in $(seq 0 127); do
		set_bg "$i" 0 0
		printf " "
	done
	reset_output
	for i in $(seq 255 -1 128); do
		set_bg "$i" 0 0
		printf " "
	done
	reset_output
	for i in $(seq 0 127); do
		set_bg 0 "$i" 0
		printf " "
	done
	reset_output
	for i in $(seq 255 -1 128); do
		set_bg 0 "$i" 0
		printf " "
	done
	reset_output
	for i in $(seq 0 127); do
		set_bg 0 0 "$i"
		printf " "
	done
	reset_output
	for i in $(seq 255 -1 128); do
		set_bg 0 0 "$i"
		printf " "
	done
	reset_output
	for i in $(seq 0 127); do
		set_bg "$(rainbow_color "$i")"
		printf " "
	done
	reset_output
	for i in $(seq 255 -1 128); do
		set_bg "$(rainbow_color "$i")"
		printf " "
	done
	reset_output
}

show_notes() {
	topic "NOTE"

	printf "%b" "\
- The \033[35m1;\033[0m attribute in \033[35m\\\\033[1;XXm\033[0m is often described as bold, but in some terminals, it is interpreted as bright color.\n\
- \033[35m\\\\033[38;5;XXXm\033[0m sets the foreground color, and \033[35m\\\\033[48;5;XXXm\033[0m sets the background color using 256-color mode.\n\
- \033[35m\\\\033[38;2;R;G;Bm\033[0m supports 24-bit true color (RGB) in compatible terminals like GNOME Terminal, iTerm2, and Windows Terminal.\n\
- \033[35m\\\\033[0m\033[0m resets all text attributes.\n\
- \033[35m\\\\033[22m\033[0m removes bold formatting, \033[35m\\\\033[39m\033[0m resets the foreground color, and \033[35m\\\\033[49m\033[0m resets the background color.\n"
}

main() {
	if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
		usage 1
		return 0
	fi

	show_basic_colors
	show_256_colors
	show_24bit_gradient
	show_notes
}

main "$@"
